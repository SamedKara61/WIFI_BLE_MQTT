
wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08004eb0  08004eb0  00005eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005278  08005278  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005278  08005278  00006278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005280  08005280  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005280  08005280  00006280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005284  08005284  00006284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005288  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007064  2**0
                  CONTENTS
 10 .bss          000029f0  20000064  20000064  00007064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002a54  20002a54  00007064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008930  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001814  00000000  00000000  0000f9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000718  00000000  00000000  000111d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000056a  00000000  00000000  000118f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e8d8  00000000  00000000  00011e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000091ed  00000000  00000000  00030732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9b66  00000000  00000000  0003991f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f3485  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002504  00000000  00000000  000f34c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000f59cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e98 	.word	0x08004e98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08004e98 	.word	0x08004e98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <SetupDMAUSART>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SetupDMAUSART() {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuffer, RxBufferSize);
 8000574:	2264      	movs	r2, #100	@ 0x64
 8000576:	4907      	ldr	r1, [pc, #28]	@ (8000594 <SetupDMAUSART+0x24>)
 8000578:	4807      	ldr	r0, [pc, #28]	@ (8000598 <SetupDMAUSART+0x28>)
 800057a:	f002 f991 	bl	80028a0 <HAL_UARTEx_ReceiveToIdle_DMA>

	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800057e:	4b07      	ldr	r3, [pc, #28]	@ (800059c <SetupDMAUSART+0x2c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4b05      	ldr	r3, [pc, #20]	@ (800059c <SetupDMAUSART+0x2c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f022 0208 	bic.w	r2, r2, #8
 800058c:	601a      	str	r2, [r3, #0]
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20002790 	.word	0x20002790
 8000598:	200027fc 	.word	0x200027fc
 800059c:	20002844 	.word	0x20002844

080005a0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80005a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005a4:	b0a2      	sub	sp, #136	@ 0x88
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	460b      	mov	r3, r1
 80005ac:	807b      	strh	r3, [r7, #2]

	HAL_Delay(2000);
 80005ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005b2:	f000 fd6f 	bl	8001094 <HAL_Delay>
	if (huart->Instance == USART1) {
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4abd      	ldr	r2, [pc, #756]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x310>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	f040 8165 	bne.w	800088c <HAL_UARTEx_RxEventCallback+0x2ec>

		memcpy(RxBuffer, huart->pRxBuffPtr, Size);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80005c6:	887a      	ldrh	r2, [r7, #2]
 80005c8:	4619      	mov	r1, r3
 80005ca:	48ba      	ldr	r0, [pc, #744]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 80005cc:	f003 fb9e 	bl	8003d0c <memcpy>
		if (*p < 3) {
 80005d0:	4bb9      	ldr	r3, [pc, #740]	@ (80008b8 <HAL_UARTEx_RxEventCallback+0x318>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	dc2d      	bgt.n	8000636 <HAL_UARTEx_RxEventCallback+0x96>

			if ((strncmp((const char*) RxBuffer, "OK", 2) == 0)
 80005da:	2202      	movs	r2, #2
 80005dc:	49b7      	ldr	r1, [pc, #732]	@ (80008bc <HAL_UARTEx_RxEventCallback+0x31c>)
 80005de:	48b5      	ldr	r0, [pc, #724]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 80005e0:	f003 fb25 	bl	8003c2e <strncmp>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d007      	beq.n	80005fa <HAL_UARTEx_RxEventCallback+0x5a>
					|| (strncmp((const char*) RxBuffer, "\r\nready\r\n", 5) == 0)) {
 80005ea:	2205      	movs	r2, #5
 80005ec:	49b4      	ldr	r1, [pc, #720]	@ (80008c0 <HAL_UARTEx_RxEventCallback+0x320>)
 80005ee:	48b1      	ldr	r0, [pc, #708]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 80005f0:	f003 fb1d 	bl	8003c2e <strncmp>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d110      	bne.n	800061c <HAL_UARTEx_RxEventCallback+0x7c>
				memset(RxBuffer, 0, sizeof(RxBuffer));
 80005fa:	2264      	movs	r2, #100	@ 0x64
 80005fc:	2100      	movs	r1, #0
 80005fe:	48ad      	ldr	r0, [pc, #692]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 8000600:	f003 fafe 	bl	8003c00 <memset>
				if (*p == 2) {
 8000604:	4bac      	ldr	r3, [pc, #688]	@ (80008b8 <HAL_UARTEx_RxEventCallback+0x318>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b02      	cmp	r3, #2
 800060c:	f040 813e 	bne.w	800088c <HAL_UARTEx_RxEventCallback+0x2ec>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2101      	movs	r1, #1
 8000614:	48ab      	ldr	r0, [pc, #684]	@ (80008c4 <HAL_UARTEx_RxEventCallback+0x324>)
 8000616:	f001 fc11 	bl	8001e3c <HAL_GPIO_WritePin>
				if (*p == 2) {
 800061a:	e137      	b.n	800088c <HAL_UARTEx_RxEventCallback+0x2ec>
				}
			} else {
				memset(RxBuffer, 0, sizeof(RxBuffer));
 800061c:	2264      	movs	r2, #100	@ 0x64
 800061e:	2100      	movs	r1, #0
 8000620:	48a4      	ldr	r0, [pc, #656]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 8000622:	f003 faed 	bl	8003c00 <memset>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2108      	movs	r1, #8
 800062a:	48a7      	ldr	r0, [pc, #668]	@ (80008c8 <HAL_UARTEx_RxEventCallback+0x328>)
 800062c:	f001 fc06 	bl	8001e3c <HAL_GPIO_WritePin>
				Error_Handler();
 8000630:	f000 fb18 	bl	8000c64 <Error_Handler>
 8000634:	e12a      	b.n	800088c <HAL_UARTEx_RxEventCallback+0x2ec>
			}

		}

		else if (strncmp((const char*) RxBuffer, "AT+QSTAAPINFO", 12) == 0) {
 8000636:	220c      	movs	r2, #12
 8000638:	49a4      	ldr	r1, [pc, #656]	@ (80008cc <HAL_UARTEx_RxEventCallback+0x32c>)
 800063a:	489e      	ldr	r0, [pc, #632]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 800063c:	f003 faf7 	bl	8003c2e <strncmp>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d117      	bne.n	8000676 <HAL_UARTEx_RxEventCallback+0xd6>
			memcpy(TxBuffer, RxBuffer, sizeof(RxBuffer));
 8000646:	4aa2      	ldr	r2, [pc, #648]	@ (80008d0 <HAL_UARTEx_RxEventCallback+0x330>)
 8000648:	4b9a      	ldr	r3, [pc, #616]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 800064a:	4610      	mov	r0, r2
 800064c:	4619      	mov	r1, r3
 800064e:	2364      	movs	r3, #100	@ 0x64
 8000650:	461a      	mov	r2, r3
 8000652:	f003 fb5b 	bl	8003d0c <memcpy>
			memset(RxBuffer, 0, sizeof(RxBuffer));
 8000656:	2264      	movs	r2, #100	@ 0x64
 8000658:	2100      	movs	r1, #0
 800065a:	4896      	ldr	r0, [pc, #600]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 800065c:	f003 fad0 	bl	8003c00 <memset>
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*) TxBuffer,
					strlen(TxBuffer));
 8000660:	489b      	ldr	r0, [pc, #620]	@ (80008d0 <HAL_UARTEx_RxEventCallback+0x330>)
 8000662:	f7ff fdb5 	bl	80001d0 <strlen>
 8000666:	4603      	mov	r3, r0
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*) TxBuffer,
 8000668:	b29b      	uxth	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	4998      	ldr	r1, [pc, #608]	@ (80008d0 <HAL_UARTEx_RxEventCallback+0x330>)
 800066e:	4899      	ldr	r0, [pc, #612]	@ (80008d4 <HAL_UARTEx_RxEventCallback+0x334>)
 8000670:	f002 f8a6 	bl	80027c0 <HAL_UART_Transmit_DMA>
 8000674:	e10a      	b.n	800088c <HAL_UARTEx_RxEventCallback+0x2ec>
			// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); // yapildi

		}

		else if (strncmp((const char*) RxBuffer, "ERROR", 5) == 0) {
 8000676:	2205      	movs	r2, #5
 8000678:	4997      	ldr	r1, [pc, #604]	@ (80008d8 <HAL_UARTEx_RxEventCallback+0x338>)
 800067a:	488e      	ldr	r0, [pc, #568]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 800067c:	f003 fad7 	bl	8003c2e <strncmp>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d114      	bne.n	80006b0 <HAL_UARTEx_RxEventCallback+0x110>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2101      	movs	r1, #1
 800068a:	488e      	ldr	r0, [pc, #568]	@ (80008c4 <HAL_UARTEx_RxEventCallback+0x324>)
 800068c:	f001 fbd6 	bl	8001e3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); //SADECE KIRMIZI
 8000690:	2201      	movs	r2, #1
 8000692:	2102      	movs	r1, #2
 8000694:	488b      	ldr	r0, [pc, #556]	@ (80008c4 <HAL_UARTEx_RxEventCallback+0x324>)
 8000696:	f001 fbd1 	bl	8001e3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2108      	movs	r1, #8
 800069e:	488a      	ldr	r0, [pc, #552]	@ (80008c8 <HAL_UARTEx_RxEventCallback+0x328>)
 80006a0:	f001 fbcc 	bl	8001e3c <HAL_GPIO_WritePin>
			memset(RxBuffer, 0, sizeof(RxBuffer));
 80006a4:	2264      	movs	r2, #100	@ 0x64
 80006a6:	2100      	movs	r1, #0
 80006a8:	4882      	ldr	r0, [pc, #520]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 80006aa:	f003 faa9 	bl	8003c00 <memset>
 80006ae:	e0ed      	b.n	800088c <HAL_UARTEx_RxEventCallback+0x2ec>

		} else if (strncmp((const char*) RxBuffer, "+QSTASTAT:WLAN_CONNECTED",
 80006b0:	2218      	movs	r2, #24
 80006b2:	498a      	ldr	r1, [pc, #552]	@ (80008dc <HAL_UARTEx_RxEventCallback+0x33c>)
 80006b4:	487f      	ldr	r0, [pc, #508]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 80006b6:	f003 faba 	bl	8003c2e <strncmp>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d10e      	bne.n	80006de <HAL_UARTEx_RxEventCallback+0x13e>
				24) == 0) {

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2108      	movs	r1, #8
 80006c4:	4880      	ldr	r0, [pc, #512]	@ (80008c8 <HAL_UARTEx_RxEventCallback+0x328>)
 80006c6:	f001 fbb9 	bl	8001e3c <HAL_GPIO_WritePin>
			*a = 1;
 80006ca:	4b85      	ldr	r3, [pc, #532]	@ (80008e0 <HAL_UARTEx_RxEventCallback+0x340>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]

			memset(RxBuffer, 0, sizeof(RxBuffer));
 80006d2:	2264      	movs	r2, #100	@ 0x64
 80006d4:	2100      	movs	r1, #0
 80006d6:	4877      	ldr	r0, [pc, #476]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 80006d8:	f003 fa92 	bl	8003c00 <memset>
 80006dc:	e0d6      	b.n	800088c <HAL_UARTEx_RxEventCallback+0x2ec>

		}
		else if (strncmp((const char*) RxBuffer, "+QSTASTAT:AP_DISCONNECT",
 80006de:	2217      	movs	r2, #23
 80006e0:	4980      	ldr	r1, [pc, #512]	@ (80008e4 <HAL_UARTEx_RxEventCallback+0x344>)
 80006e2:	4874      	ldr	r0, [pc, #464]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 80006e4:	f003 faa3 	bl	8003c2e <strncmp>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d10e      	bne.n	800070c <HAL_UARTEx_RxEventCallback+0x16c>
						23) == 0) {

					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2108      	movs	r1, #8
 80006f2:	4875      	ldr	r0, [pc, #468]	@ (80008c8 <HAL_UARTEx_RxEventCallback+0x328>)
 80006f4:	f001 fba2 	bl	8001e3c <HAL_GPIO_WritePin>
					*a = 1;
 80006f8:	4b79      	ldr	r3, [pc, #484]	@ (80008e0 <HAL_UARTEx_RxEventCallback+0x340>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2201      	movs	r2, #1
 80006fe:	601a      	str	r2, [r3, #0]

					memset(RxBuffer, 0, sizeof(RxBuffer));
 8000700:	2264      	movs	r2, #100	@ 0x64
 8000702:	2100      	movs	r1, #0
 8000704:	486b      	ldr	r0, [pc, #428]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 8000706:	f003 fa7b 	bl	8003c00 <memset>
 800070a:	e0bf      	b.n	800088c <HAL_UARTEx_RxEventCallback+0x2ec>

				}
//+QIURC: "recv",10
		else if (strncmp((const char*) RxBuffer, "\r\n+QIURC: \"recv\"", 16)
 800070c:	2210      	movs	r2, #16
 800070e:	4976      	ldr	r1, [pc, #472]	@ (80008e8 <HAL_UARTEx_RxEventCallback+0x348>)
 8000710:	4868      	ldr	r0, [pc, #416]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 8000712:	f003 fa8c 	bl	8003c2e <strncmp>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d125      	bne.n	8000768 <HAL_UARTEx_RxEventCallback+0x1c8>
				== 0) {
			char atCommand[100];
			char *ptr;
			int length;
			ptr = strstr(RxBuffer, "+QIURC: \"recv\",");
 800071c:	4973      	ldr	r1, [pc, #460]	@ (80008ec <HAL_UARTEx_RxEventCallback+0x34c>)
 800071e:	4865      	ldr	r0, [pc, #404]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 8000720:	f003 faaa 	bl	8003c78 <strstr>
 8000724:	67b8      	str	r0, [r7, #120]	@ 0x78
			// Sayıyı ayrıştır
			sscanf(ptr, "+QIURC: \"recv\",%d", &length);
 8000726:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800072a:	461a      	mov	r2, r3
 800072c:	4970      	ldr	r1, [pc, #448]	@ (80008f0 <HAL_UARTEx_RxEventCallback+0x350>)
 800072e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000730:	f003 fa3a 	bl	8003ba8 <siscanf>

			// Yeni string'i oluştur: "AT+QIRD=<length>,256"
			snprintf(atCommand, sizeof(atCommand),"AT+QIRD=%d,256\r\n", length);
 8000734:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000736:	f107 000c 	add.w	r0, r7, #12
 800073a:	4a6e      	ldr	r2, [pc, #440]	@ (80008f4 <HAL_UARTEx_RxEventCallback+0x354>)
 800073c:	2164      	movs	r1, #100	@ 0x64
 800073e:	f003 f9ff 	bl	8003b40 <sniprintf>

			HAL_UART_Transmit_DMA(&huart1, (uint8_t*) atCommand,
					strlen(atCommand));
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fd42 	bl	80001d0 <strlen>
 800074c:	4603      	mov	r3, r0
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*) atCommand,
 800074e:	b29a      	uxth	r2, r3
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4619      	mov	r1, r3
 8000756:	485f      	ldr	r0, [pc, #380]	@ (80008d4 <HAL_UARTEx_RxEventCallback+0x334>)
 8000758:	f002 f832 	bl	80027c0 <HAL_UART_Transmit_DMA>
			memset(RxBuffer, 0, sizeof(RxBuffer));
 800075c:	2264      	movs	r2, #100	@ 0x64
 800075e:	2100      	movs	r1, #0
 8000760:	4854      	ldr	r0, [pc, #336]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 8000762:	f003 fa4d 	bl	8003c00 <memset>
 8000766:	e091      	b.n	800088c <HAL_UARTEx_RxEventCallback+0x2ec>

		} else if (strncmp((const char*) RxBuffer, "+QIRD:", 6) == 0) {
 8000768:	2206      	movs	r2, #6
 800076a:	4963      	ldr	r1, [pc, #396]	@ (80008f8 <HAL_UARTEx_RxEventCallback+0x358>)
 800076c:	4851      	ldr	r0, [pc, #324]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 800076e:	f003 fa5e 	bl	8003c2e <strncmp>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	f040 8084 	bne.w	8000882 <HAL_UARTEx_RxEventCallback+0x2e2>
 800077a:	466b      	mov	r3, sp
 800077c:	469a      	mov	sl, r3
			 {
			 Wifi[j]=RxBuffer[11+j];


			 }*/
			char atCommand[100] = "AT+QSTAAPINFO=";
 800077e:	4a5f      	ldr	r2, [pc, #380]	@ (80008fc <HAL_UARTEx_RxEventCallback+0x35c>)
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	4616      	mov	r6, r2
 8000786:	6830      	ldr	r0, [r6, #0]
 8000788:	6871      	ldr	r1, [r6, #4]
 800078a:	68b2      	ldr	r2, [r6, #8]
 800078c:	c307      	stmia	r3!, {r0, r1, r2}
 800078e:	89b2      	ldrh	r2, [r6, #12]
 8000790:	7bb1      	ldrb	r1, [r6, #14]
 8000792:	801a      	strh	r2, [r3, #0]
 8000794:	460a      	mov	r2, r1
 8000796:	709a      	strb	r2, [r3, #2]
 8000798:	f107 031b 	add.w	r3, r7, #27
 800079c:	2255      	movs	r2, #85	@ 0x55
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f003 fa2d 	bl	8003c00 <memset>
			char *ptr;
			int length;
			ptr = strstr(RxBuffer, "D: ");
 80007a6:	4956      	ldr	r1, [pc, #344]	@ (8000900 <HAL_UARTEx_RxEventCallback+0x360>)
 80007a8:	4842      	ldr	r0, [pc, #264]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 80007aa:	f003 fa65 	bl	8003c78 <strstr>
 80007ae:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
			sscanf(ptr, "D: %d\r\n", &length);
 80007b2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80007b6:	461a      	mov	r2, r3
 80007b8:	4952      	ldr	r1, [pc, #328]	@ (8000904 <HAL_UARTEx_RxEventCallback+0x364>)
 80007ba:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80007be:	f003 f9f3 	bl	8003ba8 <siscanf>
			ptr = strstr(ptr, "\r\n") + 2; // 2 karakter ilerle çünkü "\r\n" atlanacak
 80007c2:	4951      	ldr	r1, [pc, #324]	@ (8000908 <HAL_UARTEx_RxEventCallback+0x368>)
 80007c4:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80007c8:	f003 fa56 	bl	8003c78 <strstr>
 80007cc:	4603      	mov	r3, r0
 80007ce:	3302      	adds	r3, #2
 80007d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			char Wifi[length + 1];        // Uzunluk kadar alan ayır
 80007d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80007d6:	1c59      	adds	r1, r3, #1
 80007d8:	1e4b      	subs	r3, r1, #1
 80007da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80007de:	460a      	mov	r2, r1
 80007e0:	2300      	movs	r3, #0
 80007e2:	4690      	mov	r8, r2
 80007e4:	4699      	mov	r9, r3
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007fa:	460a      	mov	r2, r1
 80007fc:	2300      	movs	r3, #0
 80007fe:	4614      	mov	r4, r2
 8000800:	461d      	mov	r5, r3
 8000802:	f04f 0200 	mov.w	r2, #0
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	00eb      	lsls	r3, r5, #3
 800080c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000810:	00e2      	lsls	r2, r4, #3
 8000812:	460b      	mov	r3, r1
 8000814:	3307      	adds	r3, #7
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	ebad 0d03 	sub.w	sp, sp, r3
 800081e:	466b      	mov	r3, sp
 8000820:	3300      	adds	r3, #0
 8000822:	67fb      	str	r3, [r7, #124]	@ 0x7c
			strncpy(Wifi, ptr, length);   // Uzunluk kadar kopyala
 8000824:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000826:	461a      	mov	r2, r3
 8000828:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800082c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800082e:	f003 fa10 	bl	8003c52 <strncpy>
			Wifi[length] = '\0';          // Null-terminator ekle
 8000832:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000834:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000836:	2100      	movs	r1, #0
 8000838:	54d1      	strb	r1, [r2, r3]
			strcat(atCommand, Wifi);
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000840:	4618      	mov	r0, r3
 8000842:	f003 f9e5 	bl	8003c10 <strcat>
			strcat(atCommand, "\r\n");
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fcc0 	bl	80001d0 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	461a      	mov	r2, r3
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	4413      	add	r3, r2
 800085a:	4a2b      	ldr	r2, [pc, #172]	@ (8000908 <HAL_UARTEx_RxEventCallback+0x368>)
 800085c:	8811      	ldrh	r1, [r2, #0]
 800085e:	7892      	ldrb	r2, [r2, #2]
 8000860:	8019      	strh	r1, [r3, #0]
 8000862:	709a      	strb	r2, [r3, #2]

			HAL_UART_Transmit_DMA(&huart1, (uint8_t*) atCommand,
					strlen(atCommand));
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fcb1 	bl	80001d0 <strlen>
 800086e:	4603      	mov	r3, r0
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*) atCommand,
 8000870:	b29a      	uxth	r2, r3
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	4619      	mov	r1, r3
 8000878:	4816      	ldr	r0, [pc, #88]	@ (80008d4 <HAL_UARTEx_RxEventCallback+0x334>)
 800087a:	f001 ffa1 	bl	80027c0 <HAL_UART_Transmit_DMA>
 800087e:	46d5      	mov	sp, sl
 8000880:	e004      	b.n	800088c <HAL_UARTEx_RxEventCallback+0x2ec>

		}

		else {
			memset(RxBuffer, 0, sizeof(RxBuffer));
 8000882:	2264      	movs	r2, #100	@ 0x64
 8000884:	2100      	movs	r1, #0
 8000886:	480b      	ldr	r0, [pc, #44]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 8000888:	f003 f9ba 	bl	8003c00 <memset>

		}

	}

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuffer, RxBufferSize);
 800088c:	2264      	movs	r2, #100	@ 0x64
 800088e:	4909      	ldr	r1, [pc, #36]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x314>)
 8000890:	4810      	ldr	r0, [pc, #64]	@ (80008d4 <HAL_UARTEx_RxEventCallback+0x334>)
 8000892:	f002 f805 	bl	80028a0 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000896:	4b1d      	ldr	r3, [pc, #116]	@ (800090c <HAL_UARTEx_RxEventCallback+0x36c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <HAL_UARTEx_RxEventCallback+0x36c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f022 0208 	bic.w	r2, r2, #8
 80008a4:	601a      	str	r2, [r3, #0]

}
 80008a6:	bf00      	nop
 80008a8:	3788      	adds	r7, #136	@ 0x88
 80008aa:	46bd      	mov	sp, r7
 80008ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b0:	40011000 	.word	0x40011000
 80008b4:	20002790 	.word	0x20002790
 80008b8:	20000000 	.word	0x20000000
 80008bc:	08004eb0 	.word	0x08004eb0
 80008c0:	08004eb4 	.word	0x08004eb4
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40020800 	.word	0x40020800
 80008cc:	08004ec0 	.word	0x08004ec0
 80008d0:	20000080 	.word	0x20000080
 80008d4:	200027fc 	.word	0x200027fc
 80008d8:	08004ed0 	.word	0x08004ed0
 80008dc:	08004ed8 	.word	0x08004ed8
 80008e0:	20000004 	.word	0x20000004
 80008e4:	08004ef4 	.word	0x08004ef4
 80008e8:	08004f0c 	.word	0x08004f0c
 80008ec:	08004f20 	.word	0x08004f20
 80008f0:	08004f30 	.word	0x08004f30
 80008f4:	08004f44 	.word	0x08004f44
 80008f8:	08004f58 	.word	0x08004f58
 80008fc:	08004f70 	.word	0x08004f70
 8000900:	08004f60 	.word	0x08004f60
 8000904:	08004f64 	.word	0x08004f64
 8000908:	08004f6c 	.word	0x08004f6c
 800090c:	20002844 	.word	0x20002844

08000910 <TransmitapFunction>:

void TransmitapFunction() {
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0

	char *Settings[] = { "AT+QSOFTAP=\"Rise_X_Gate_Away\"\r\n",
 8000916:	4a1c      	ldr	r2, [pc, #112]	@ (8000988 <TransmitapFunction+0x78>)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	ca07      	ldmia	r2, {r0, r1, r2}
 800091c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			//	 "AT+QISEND=2,30,\"Superbox_WiFi_EFCA,NA2TRGLL5Y1\"\r\n",
			//"AT+QIRD=10,256\r\n"

	};

	for (*p = 0; *p < 3; (*p)++) {
 8000920:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <TransmitapFunction+0x7c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	e023      	b.n	8000972 <TransmitapFunction+0x62>
		memset(TxBuffer, 0, sizeof(*p));
 800092a:	2204      	movs	r2, #4
 800092c:	2100      	movs	r1, #0
 800092e:	4818      	ldr	r0, [pc, #96]	@ (8000990 <TransmitapFunction+0x80>)
 8000930:	f003 f966 	bl	8003c00 <memset>
		strcpy(TxBuffer, Settings[*p]);
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <TransmitapFunction+0x7c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	3310      	adds	r3, #16
 800093e:	443b      	add	r3, r7
 8000940:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000944:	4619      	mov	r1, r3
 8000946:	4812      	ldr	r0, [pc, #72]	@ (8000990 <TransmitapFunction+0x80>)
 8000948:	f003 f9d8 	bl	8003cfc <strcpy>

		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) TxBuffer, strlen(TxBuffer));
 800094c:	4810      	ldr	r0, [pc, #64]	@ (8000990 <TransmitapFunction+0x80>)
 800094e:	f7ff fc3f 	bl	80001d0 <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	b29b      	uxth	r3, r3
 8000956:	461a      	mov	r2, r3
 8000958:	490d      	ldr	r1, [pc, #52]	@ (8000990 <TransmitapFunction+0x80>)
 800095a:	480e      	ldr	r0, [pc, #56]	@ (8000994 <TransmitapFunction+0x84>)
 800095c:	f001 ff30 	bl	80027c0 <HAL_UART_Transmit_DMA>

		HAL_Delay(700);
 8000960:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000964:	f000 fb96 	bl	8001094 <HAL_Delay>
	for (*p = 0; *p < 3; (*p)++) {
 8000968:	4b08      	ldr	r3, [pc, #32]	@ (800098c <TransmitapFunction+0x7c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	3201      	adds	r2, #1
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <TransmitapFunction+0x7c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b02      	cmp	r3, #2
 800097a:	ddd6      	ble.n	800092a <TransmitapFunction+0x1a>

	}
}
 800097c:	bf00      	nop
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	08004ff4 	.word	0x08004ff4
 800098c:	20000000 	.word	0x20000000
 8000990:	20000080 	.word	0x20000080
 8000994:	200027fc 	.word	0x200027fc

08000998 <BLEHIGH>:

void BLEHIGH() {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2180      	movs	r1, #128	@ 0x80
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <BLEHIGH+0x14>)
 80009a2:	f001 fa4b 	bl	8001e3c <HAL_GPIO_WritePin>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40020800 	.word	0x40020800

080009b0 <TransmitBleFunction>:
		HAL_Delay(500);
	}

}

void TransmitBleFunction() {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
	char *Settings[] = { "AT+QRST\r\n",
 80009b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a28 <TransmitBleFunction+0x78>)
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80009bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			"AT+QBLEINIT=3\r\n",
			"AT+QBLENAME=Rise_X_Gate_Away\r\n"

	};

	for (*p = 0; *p < 3; (*p)++) {
 80009c0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <TransmitBleFunction+0x7c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	e023      	b.n	8000a12 <TransmitBleFunction+0x62>
		memset(TxBuffer, 0, sizeof(*p));
 80009ca:	2204      	movs	r2, #4
 80009cc:	2100      	movs	r1, #0
 80009ce:	4818      	ldr	r0, [pc, #96]	@ (8000a30 <TransmitBleFunction+0x80>)
 80009d0:	f003 f916 	bl	8003c00 <memset>
		strcpy(TxBuffer, Settings[*p]);
 80009d4:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <TransmitBleFunction+0x7c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	3310      	adds	r3, #16
 80009de:	443b      	add	r3, r7
 80009e0:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80009e4:	4619      	mov	r1, r3
 80009e6:	4812      	ldr	r0, [pc, #72]	@ (8000a30 <TransmitBleFunction+0x80>)
 80009e8:	f003 f988 	bl	8003cfc <strcpy>

		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) TxBuffer, strlen(TxBuffer));
 80009ec:	4810      	ldr	r0, [pc, #64]	@ (8000a30 <TransmitBleFunction+0x80>)
 80009ee:	f7ff fbef 	bl	80001d0 <strlen>
 80009f2:	4603      	mov	r3, r0
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	461a      	mov	r2, r3
 80009f8:	490d      	ldr	r1, [pc, #52]	@ (8000a30 <TransmitBleFunction+0x80>)
 80009fa:	480e      	ldr	r0, [pc, #56]	@ (8000a34 <TransmitBleFunction+0x84>)
 80009fc:	f001 fee0 	bl	80027c0 <HAL_UART_Transmit_DMA>

		HAL_Delay(500);
 8000a00:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a04:	f000 fb46 	bl	8001094 <HAL_Delay>
	for (*p = 0; *p < 3; (*p)++) {
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <TransmitBleFunction+0x7c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	3201      	adds	r2, #1
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <TransmitBleFunction+0x7c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	ddd6      	ble.n	80009ca <TransmitBleFunction+0x1a>

	}

}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	080050f0 	.word	0x080050f0
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000080 	.word	0x20000080
 8000a34:	200027fc 	.word	0x200027fc

08000a38 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a3c:	f000 fab8 	bl	8000fb0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a40:	f000 f810 	bl	8000a64 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a44:	f000 f8be 	bl	8000bc4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000a48:	f000 f894 	bl	8000b74 <MX_DMA_Init>
	MX_USART1_UART_Init();
 8000a4c:	f000 f868 	bl	8000b20 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	BLEHIGH();
 8000a50:	f7ff ffa2 	bl	8000998 <BLEHIGH>
	SetupDMAUSART();
 8000a54:	f7ff fd8c 	bl	8000570 <SetupDMAUSART>
	TransmitBleFunction();
 8000a58:	f7ff ffaa 	bl	80009b0 <TransmitBleFunction>
	TransmitapFunction();
 8000a5c:	f7ff ff58 	bl	8000910 <TransmitapFunction>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <main+0x28>

08000a64 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b094      	sub	sp, #80	@ 0x50
 8000a68:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a6a:	f107 0320 	add.w	r3, r7, #32
 8000a6e:	2230      	movs	r2, #48	@ 0x30
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f003 f8c4 	bl	8003c00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	4b22      	ldr	r3, [pc, #136]	@ (8000b18 <SystemClock_Config+0xb4>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a90:	4a21      	ldr	r2, [pc, #132]	@ (8000b18 <SystemClock_Config+0xb4>)
 8000a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a98:	4b1f      	ldr	r3, [pc, #124]	@ (8000b18 <SystemClock_Config+0xb4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <SystemClock_Config+0xb8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a1b      	ldr	r2, [pc, #108]	@ (8000b1c <SystemClock_Config+0xb8>)
 8000aae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <SystemClock_Config+0xb8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f001 f9cb 	bl	8001e70 <HAL_RCC_OscConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0x80>
		Error_Handler();
 8000ae0:	f000 f8c0 	bl	8000c64 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 fc2e 	bl	8002360 <HAL_RCC_ClockConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0xaa>
		Error_Handler();
 8000b0a:	f000 f8ab 	bl	8000c64 <Error_Handler>
	}
}
 8000b0e:	bf00      	nop
 8000b10:	3750      	adds	r7, #80	@ 0x50
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40007000 	.word	0x40007000

08000b20 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	@ (8000b70 <MX_USART1_UART_Init+0x50>)
 8000b28:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b58:	f001 fde2 	bl	8002720 <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000b62:	f000 f87f 	bl	8000c64 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200027fc 	.word	0x200027fc
 8000b70:	40011000 	.word	0x40011000

08000b74 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <MX_DMA_Init+0x4c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc0 <MX_DMA_Init+0x4c>)
 8000b84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <MX_DMA_Init+0x4c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2101      	movs	r1, #1
 8000b9a:	203a      	movs	r0, #58	@ 0x3a
 8000b9c:	f000 fb79 	bl	8001292 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ba0:	203a      	movs	r0, #58	@ 0x3a
 8000ba2:	f000 fb92 	bl	80012ca <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 1, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2101      	movs	r1, #1
 8000baa:	2046      	movs	r0, #70	@ 0x46
 8000bac:	f000 fb71 	bl	8001292 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000bb0:	2046      	movs	r0, #70	@ 0x46
 8000bb2:	f000 fb8a 	bl	80012ca <HAL_NVIC_EnableIRQ>

}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <MX_GPIO_Init+0x98>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c5c <MX_GPIO_Init+0x98>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <MX_GPIO_Init+0x98>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <MX_GPIO_Init+0x98>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a17      	ldr	r2, [pc, #92]	@ (8000c5c <MX_GPIO_Init+0x98>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <MX_GPIO_Init+0x98>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <MX_GPIO_Init+0x98>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a10      	ldr	r2, [pc, #64]	@ (8000c5c <MX_GPIO_Init+0x98>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <MX_GPIO_Init+0x98>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2180      	movs	r1, #128	@ 0x80
 8000c32:	480b      	ldr	r0, [pc, #44]	@ (8000c60 <MX_GPIO_Init+0x9c>)
 8000c34:	f001 f902 	bl	8001e3c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c38:	2380      	movs	r3, #128	@ 0x80
 8000c3a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <MX_GPIO_Init+0x9c>)
 8000c50:	f000 ff58 	bl	8001b04 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c54:	bf00      	nop
 8000c56:	3720      	adds	r7, #32
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020800 	.word	0x40020800

08000c64 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */

	__disable_irq();
	while (1) {
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <Error_Handler+0x8>

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cbc <HAL_MspInit+0x4c>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c86:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	4a08      	ldr	r2, [pc, #32]	@ (8000cbc <HAL_MspInit+0x4c>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a4d      	ldr	r2, [pc, #308]	@ (8000e14 <HAL_UART_MspInit+0x154>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	f040 8093 	bne.w	8000e0a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8000e18 <HAL_UART_MspInit+0x158>)
 8000cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cec:	4a4a      	ldr	r2, [pc, #296]	@ (8000e18 <HAL_UART_MspInit+0x158>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf4:	4b48      	ldr	r3, [pc, #288]	@ (8000e18 <HAL_UART_MspInit+0x158>)
 8000cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	4b44      	ldr	r3, [pc, #272]	@ (8000e18 <HAL_UART_MspInit+0x158>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d08:	4a43      	ldr	r2, [pc, #268]	@ (8000e18 <HAL_UART_MspInit+0x158>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d10:	4b41      	ldr	r3, [pc, #260]	@ (8000e18 <HAL_UART_MspInit+0x158>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d1c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d2e:	2307      	movs	r3, #7
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4838      	ldr	r0, [pc, #224]	@ (8000e1c <HAL_UART_MspInit+0x15c>)
 8000d3a:	f000 fee3 	bl	8001b04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000d3e:	4b38      	ldr	r3, [pc, #224]	@ (8000e20 <HAL_UART_MspInit+0x160>)
 8000d40:	4a38      	ldr	r2, [pc, #224]	@ (8000e24 <HAL_UART_MspInit+0x164>)
 8000d42:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000d44:	4b36      	ldr	r3, [pc, #216]	@ (8000e20 <HAL_UART_MspInit+0x160>)
 8000d46:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d4a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d4c:	4b34      	ldr	r3, [pc, #208]	@ (8000e20 <HAL_UART_MspInit+0x160>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d52:	4b33      	ldr	r3, [pc, #204]	@ (8000e20 <HAL_UART_MspInit+0x160>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d58:	4b31      	ldr	r3, [pc, #196]	@ (8000e20 <HAL_UART_MspInit+0x160>)
 8000d5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d5e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d60:	4b2f      	ldr	r3, [pc, #188]	@ (8000e20 <HAL_UART_MspInit+0x160>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d66:	4b2e      	ldr	r3, [pc, #184]	@ (8000e20 <HAL_UART_MspInit+0x160>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e20 <HAL_UART_MspInit+0x160>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d72:	4b2b      	ldr	r3, [pc, #172]	@ (8000e20 <HAL_UART_MspInit+0x160>)
 8000d74:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d78:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d7a:	4b29      	ldr	r3, [pc, #164]	@ (8000e20 <HAL_UART_MspInit+0x160>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d80:	4827      	ldr	r0, [pc, #156]	@ (8000e20 <HAL_UART_MspInit+0x160>)
 8000d82:	f000 fabd 	bl	8001300 <HAL_DMA_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000d8c:	f7ff ff6a 	bl	8000c64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a23      	ldr	r2, [pc, #140]	@ (8000e20 <HAL_UART_MspInit+0x160>)
 8000d94:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d96:	4a22      	ldr	r2, [pc, #136]	@ (8000e20 <HAL_UART_MspInit+0x160>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000d9c:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <HAL_UART_MspInit+0x168>)
 8000d9e:	4a23      	ldr	r2, [pc, #140]	@ (8000e2c <HAL_UART_MspInit+0x16c>)
 8000da0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000da2:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <HAL_UART_MspInit+0x168>)
 8000da4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000da8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000daa:	4b1f      	ldr	r3, [pc, #124]	@ (8000e28 <HAL_UART_MspInit+0x168>)
 8000dac:	2240      	movs	r2, #64	@ 0x40
 8000dae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <HAL_UART_MspInit+0x168>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e28 <HAL_UART_MspInit+0x168>)
 8000db8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dbc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <HAL_UART_MspInit+0x168>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <HAL_UART_MspInit+0x168>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <HAL_UART_MspInit+0x168>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <HAL_UART_MspInit+0x168>)
 8000dd2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dd6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <HAL_UART_MspInit+0x168>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000dde:	4812      	ldr	r0, [pc, #72]	@ (8000e28 <HAL_UART_MspInit+0x168>)
 8000de0:	f000 fa8e 	bl	8001300 <HAL_DMA_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8000dea:	f7ff ff3b 	bl	8000c64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e28 <HAL_UART_MspInit+0x168>)
 8000df2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000df4:	4a0c      	ldr	r2, [pc, #48]	@ (8000e28 <HAL_UART_MspInit+0x168>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	2025      	movs	r0, #37	@ 0x25
 8000e00:	f000 fa47 	bl	8001292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e04:	2025      	movs	r0, #37	@ 0x25
 8000e06:	f000 fa60 	bl	80012ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	@ 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40011000 	.word	0x40011000
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	20002844 	.word	0x20002844
 8000e24:	40026440 	.word	0x40026440
 8000e28:	200028a4 	.word	0x200028a4
 8000e2c:	400264b8 	.word	0x400264b8

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <NMI_Handler+0x4>

08000e38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <MemManage_Handler+0x4>

08000e48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e86:	f000 f8e5 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <USART1_IRQHandler+0x10>)
 8000e96:	f001 fd61 	bl	800295c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200027fc 	.word	0x200027fc

08000ea4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <DMA2_Stream2_IRQHandler+0x10>)
 8000eaa:	f000 fbc1 	bl	8001630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20002844 	.word	0x20002844

08000eb8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <DMA2_Stream7_IRQHandler+0x10>)
 8000ebe:	f000 fbb7 	bl	8001630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200028a4 	.word	0x200028a4

08000ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <_sbrk+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <_sbrk+0x60>)
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <_sbrk+0x64>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <_sbrk+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d207      	bcs.n	8000f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000efc:	f002 fed2 	bl	8003ca4 <__errno>
 8000f00:	4603      	mov	r3, r0
 8000f02:	220c      	movs	r2, #12
 8000f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <_sbrk+0x64>)
 8000f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20020000 	.word	0x20020000
 8000f2c:	00000400 	.word	0x00000400
 8000f30:	20002904 	.word	0x20002904
 8000f34:	20002a58 	.word	0x20002a58

08000f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack     /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f94 <LoopFillZerobss+0xe>

/* Call the clock syst em initialization function.*/
  bl  SystemInit
 8000f60:	f7ff ffea 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f64:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f66:	490d      	ldr	r1, [pc, #52]	@ (8000f9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f68:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f002 fe91 	bl	8003cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f7ff fd53 	bl	8000a38 <main>
  bx  lr
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000fa0:	08005288 	.word	0x08005288
  ldr r2, =_sbss
 8000fa4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000fa8:	20002a54 	.word	0x20002a54

08000fac <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff0 <HAL_Init+0x40>)
 8000fba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <HAL_Init+0x40>)
 8000fc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	@ (8000ff0 <HAL_Init+0x40>)
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 f94f 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f808 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f7ff fe44 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_InitTick+0x54>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <HAL_InitTick+0x58>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f967 	bl	80012e6 <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f92f 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	@ (8001050 <HAL_InitTick+0x5c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000008 	.word	0x20000008
 800104c:	20000010 	.word	0x20000010
 8001050:	2000000c 	.word	0x2000000c

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000010 	.word	0x20000010
 8001078:	20002908 	.word	0x20002908

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20002908 	.word	0x20002908

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000010 	.word	0x20000010

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	@ (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	@ (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	@ (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	@ 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	@ 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f7ff ff8e 	bl	800117c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff29 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff3e 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff8e 	bl	80011d0 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5d 	bl	800117c <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff31 	bl	8001140 <__NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffa2 	bl	8001238 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff feb6 	bl	800107c <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e099      	b.n	8001450 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2202      	movs	r2, #2
 8001320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133c:	e00f      	b.n	800135e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800133e:	f7ff fe9d 	bl	800107c <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b05      	cmp	r3, #5
 800134a:	d908      	bls.n	800135e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2220      	movs	r2, #32
 8001350:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2203      	movs	r2, #3
 8001356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e078      	b.n	8001450 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1e8      	bne.n	800133e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	4b38      	ldr	r3, [pc, #224]	@ (8001458 <HAL_DMA_Init+0x158>)
 8001378:	4013      	ands	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800138a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d107      	bne.n	80013c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c0:	4313      	orrs	r3, r2
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f023 0307 	bic.w	r3, r3, #7
 80013de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d117      	bne.n	8001422 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00e      	beq.n	8001422 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 fb01 	bl	8001a0c <DMA_CheckFifoParam>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2240      	movs	r2, #64	@ 0x40
 8001414:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800141e:	2301      	movs	r3, #1
 8001420:	e016      	b.n	8001450 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fab8 	bl	80019a0 <DMA_CalcBaseAndBitshift>
 8001430:	4603      	mov	r3, r0
 8001432:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001438:	223f      	movs	r2, #63	@ 0x3f
 800143a:	409a      	lsls	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	f010803f 	.word	0xf010803f

0800145c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001472:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_DMA_Start_IT+0x26>
 800147e:	2302      	movs	r3, #2
 8001480:	e040      	b.n	8001504 <HAL_DMA_Start_IT+0xa8>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b01      	cmp	r3, #1
 8001494:	d12f      	bne.n	80014f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2202      	movs	r2, #2
 800149a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 fa4a 	bl	8001944 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b4:	223f      	movs	r2, #63	@ 0x3f
 80014b6:	409a      	lsls	r2, r3
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0216 	orr.w	r2, r2, #22
 80014ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d007      	beq.n	80014e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0208 	orr.w	r2, r2, #8
 80014e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e005      	b.n	8001502 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014fe:	2302      	movs	r3, #2
 8001500:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001502:	7dfb      	ldrb	r3, [r7, #23]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001518:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800151a:	f7ff fdaf 	bl	800107c <HAL_GetTick>
 800151e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d008      	beq.n	800153e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2280      	movs	r2, #128	@ 0x80
 8001530:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e052      	b.n	80015e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0216 	bic.w	r2, r2, #22
 800154c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800155c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	2b00      	cmp	r3, #0
 8001564:	d103      	bne.n	800156e <HAL_DMA_Abort+0x62>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0208 	bic.w	r2, r2, #8
 800157c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0201 	bic.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800158e:	e013      	b.n	80015b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001590:	f7ff fd74 	bl	800107c <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b05      	cmp	r3, #5
 800159c:	d90c      	bls.n	80015b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2220      	movs	r2, #32
 80015a2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2203      	movs	r2, #3
 80015a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e015      	b.n	80015e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1e4      	bne.n	8001590 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ca:	223f      	movs	r2, #63	@ 0x3f
 80015cc:	409a      	lsls	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d004      	beq.n	800160a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2280      	movs	r2, #128	@ 0x80
 8001604:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00c      	b.n	8001624 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2205      	movs	r2, #5
 800160e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0201 	bic.w	r2, r2, #1
 8001620:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800163c:	4b8e      	ldr	r3, [pc, #568]	@ (8001878 <HAL_DMA_IRQHandler+0x248>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a8e      	ldr	r2, [pc, #568]	@ (800187c <HAL_DMA_IRQHandler+0x24c>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	0a9b      	lsrs	r3, r3, #10
 8001648:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165a:	2208      	movs	r2, #8
 800165c:	409a      	lsls	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4013      	ands	r3, r2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d01a      	beq.n	800169c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d013      	beq.n	800169c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0204 	bic.w	r2, r2, #4
 8001682:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001688:	2208      	movs	r2, #8
 800168a:	409a      	lsls	r2, r3
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001694:	f043 0201 	orr.w	r2, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a0:	2201      	movs	r2, #1
 80016a2:	409a      	lsls	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d012      	beq.n	80016d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00b      	beq.n	80016d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016be:	2201      	movs	r2, #1
 80016c0:	409a      	lsls	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ca:	f043 0202 	orr.w	r2, r3, #2
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	2204      	movs	r2, #4
 80016d8:	409a      	lsls	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4013      	ands	r3, r2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d012      	beq.n	8001708 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00b      	beq.n	8001708 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f4:	2204      	movs	r2, #4
 80016f6:	409a      	lsls	r2, r3
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001700:	f043 0204 	orr.w	r2, r3, #4
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800170c:	2210      	movs	r2, #16
 800170e:	409a      	lsls	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d043      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d03c      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172a:	2210      	movs	r2, #16
 800172c:	409a      	lsls	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d018      	beq.n	8001772 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d108      	bne.n	8001760 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	2b00      	cmp	r3, #0
 8001754:	d024      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
 800175e:	e01f      	b.n	80017a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001764:	2b00      	cmp	r3, #0
 8001766:	d01b      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	4798      	blx	r3
 8001770:	e016      	b.n	80017a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0208 	bic.w	r2, r2, #8
 800178e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a4:	2220      	movs	r2, #32
 80017a6:	409a      	lsls	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 808f 	beq.w	80018d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 8087 	beq.w	80018d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c6:	2220      	movs	r2, #32
 80017c8:	409a      	lsls	r2, r3
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b05      	cmp	r3, #5
 80017d8:	d136      	bne.n	8001848 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0216 	bic.w	r2, r2, #22
 80017e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	695a      	ldr	r2, [r3, #20]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d103      	bne.n	800180a <HAL_DMA_IRQHandler+0x1da>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001806:	2b00      	cmp	r3, #0
 8001808:	d007      	beq.n	800181a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0208 	bic.w	r2, r2, #8
 8001818:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181e:	223f      	movs	r2, #63	@ 0x3f
 8001820:	409a      	lsls	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800183a:	2b00      	cmp	r3, #0
 800183c:	d07e      	beq.n	800193c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	4798      	blx	r3
        }
        return;
 8001846:	e079      	b.n	800193c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d01d      	beq.n	8001892 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10d      	bne.n	8001880 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001868:	2b00      	cmp	r3, #0
 800186a:	d031      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	4798      	blx	r3
 8001874:	e02c      	b.n	80018d0 <HAL_DMA_IRQHandler+0x2a0>
 8001876:	bf00      	nop
 8001878:	20000008 	.word	0x20000008
 800187c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001884:	2b00      	cmp	r3, #0
 8001886:	d023      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	4798      	blx	r3
 8001890:	e01e      	b.n	80018d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10f      	bne.n	80018c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0210 	bic.w	r2, r2, #16
 80018ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d032      	beq.n	800193e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d022      	beq.n	800192a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2205      	movs	r2, #5
 80018e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0201 	bic.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	3301      	adds	r3, #1
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	429a      	cmp	r2, r3
 8001906:	d307      	bcc.n	8001918 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f2      	bne.n	80018fc <HAL_DMA_IRQHandler+0x2cc>
 8001916:	e000      	b.n	800191a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001918:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	4798      	blx	r3
 800193a:	e000      	b.n	800193e <HAL_DMA_IRQHandler+0x30e>
        return;
 800193c:	bf00      	nop
    }
  }
}
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001960:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b40      	cmp	r3, #64	@ 0x40
 8001970:	d108      	bne.n	8001984 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001982:	e007      	b.n	8001994 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	60da      	str	r2, [r3, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3b10      	subs	r3, #16
 80019b0:	4a14      	ldr	r2, [pc, #80]	@ (8001a04 <DMA_CalcBaseAndBitshift+0x64>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019ba:	4a13      	ldr	r2, [pc, #76]	@ (8001a08 <DMA_CalcBaseAndBitshift+0x68>)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d909      	bls.n	80019e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80019d6:	f023 0303 	bic.w	r3, r3, #3
 80019da:	1d1a      	adds	r2, r3, #4
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	659a      	str	r2, [r3, #88]	@ 0x58
 80019e0:	e007      	b.n	80019f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80019ea:	f023 0303 	bic.w	r3, r3, #3
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	aaaaaaab 	.word	0xaaaaaaab
 8001a08:	08005120 	.word	0x08005120

08001a0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d11f      	bne.n	8001a66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d856      	bhi.n	8001ada <DMA_CheckFifoParam+0xce>
 8001a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a34 <DMA_CheckFifoParam+0x28>)
 8001a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a32:	bf00      	nop
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001a57 	.word	0x08001a57
 8001a3c:	08001a45 	.word	0x08001a45
 8001a40:	08001adb 	.word	0x08001adb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d046      	beq.n	8001ade <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a54:	e043      	b.n	8001ade <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a5e:	d140      	bne.n	8001ae2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a64:	e03d      	b.n	8001ae2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a6e:	d121      	bne.n	8001ab4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d837      	bhi.n	8001ae6 <DMA_CheckFifoParam+0xda>
 8001a76:	a201      	add	r2, pc, #4	@ (adr r2, 8001a7c <DMA_CheckFifoParam+0x70>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001a8d 	.word	0x08001a8d
 8001a80:	08001a93 	.word	0x08001a93
 8001a84:	08001a8d 	.word	0x08001a8d
 8001a88:	08001aa5 	.word	0x08001aa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a90:	e030      	b.n	8001af4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d025      	beq.n	8001aea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aa2:	e022      	b.n	8001aea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001aac:	d11f      	bne.n	8001aee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ab2:	e01c      	b.n	8001aee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d903      	bls.n	8001ac2 <DMA_CheckFifoParam+0xb6>
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d003      	beq.n	8001ac8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ac0:	e018      	b.n	8001af4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac6:	e015      	b.n	8001af4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001acc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00e      	beq.n	8001af2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad8:	e00b      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ada:	bf00      	nop
 8001adc:	e00a      	b.n	8001af4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ade:	bf00      	nop
 8001ae0:	e008      	b.n	8001af4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ae2:	bf00      	nop
 8001ae4:	e006      	b.n	8001af4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ae6:	bf00      	nop
 8001ae8:	e004      	b.n	8001af4 <DMA_CheckFifoParam+0xe8>
      break;
 8001aea:	bf00      	nop
 8001aec:	e002      	b.n	8001af4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001aee:	bf00      	nop
 8001af0:	e000      	b.n	8001af4 <DMA_CheckFifoParam+0xe8>
      break;
 8001af2:	bf00      	nop
    }
  } 
  
  return status; 
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop

08001b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	@ 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	e16b      	b.n	8001df8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b20:	2201      	movs	r2, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	f040 815a 	bne.w	8001df2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d005      	beq.n	8001b56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d130      	bne.n	8001bb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 0201 	and.w	r2, r3, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d017      	beq.n	8001bf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d123      	bne.n	8001c48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	08da      	lsrs	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3208      	adds	r2, #8
 8001c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	220f      	movs	r2, #15
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	08da      	lsrs	r2, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3208      	adds	r2, #8
 8001c42:	69b9      	ldr	r1, [r7, #24]
 8001c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0203 	and.w	r2, r3, #3
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80b4 	beq.w	8001df2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b60      	ldr	r3, [pc, #384]	@ (8001e10 <HAL_GPIO_Init+0x30c>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	4a5f      	ldr	r2, [pc, #380]	@ (8001e10 <HAL_GPIO_Init+0x30c>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001e10 <HAL_GPIO_Init+0x30c>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ca6:	4a5b      	ldr	r2, [pc, #364]	@ (8001e14 <HAL_GPIO_Init+0x310>)
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	3302      	adds	r3, #2
 8001cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a52      	ldr	r2, [pc, #328]	@ (8001e18 <HAL_GPIO_Init+0x314>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d02b      	beq.n	8001d2a <HAL_GPIO_Init+0x226>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a51      	ldr	r2, [pc, #324]	@ (8001e1c <HAL_GPIO_Init+0x318>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d025      	beq.n	8001d26 <HAL_GPIO_Init+0x222>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a50      	ldr	r2, [pc, #320]	@ (8001e20 <HAL_GPIO_Init+0x31c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d01f      	beq.n	8001d22 <HAL_GPIO_Init+0x21e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4f      	ldr	r2, [pc, #316]	@ (8001e24 <HAL_GPIO_Init+0x320>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d019      	beq.n	8001d1e <HAL_GPIO_Init+0x21a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4e      	ldr	r2, [pc, #312]	@ (8001e28 <HAL_GPIO_Init+0x324>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d013      	beq.n	8001d1a <HAL_GPIO_Init+0x216>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4d      	ldr	r2, [pc, #308]	@ (8001e2c <HAL_GPIO_Init+0x328>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00d      	beq.n	8001d16 <HAL_GPIO_Init+0x212>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4c      	ldr	r2, [pc, #304]	@ (8001e30 <HAL_GPIO_Init+0x32c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d007      	beq.n	8001d12 <HAL_GPIO_Init+0x20e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4b      	ldr	r2, [pc, #300]	@ (8001e34 <HAL_GPIO_Init+0x330>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d101      	bne.n	8001d0e <HAL_GPIO_Init+0x20a>
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	e00e      	b.n	8001d2c <HAL_GPIO_Init+0x228>
 8001d0e:	2308      	movs	r3, #8
 8001d10:	e00c      	b.n	8001d2c <HAL_GPIO_Init+0x228>
 8001d12:	2306      	movs	r3, #6
 8001d14:	e00a      	b.n	8001d2c <HAL_GPIO_Init+0x228>
 8001d16:	2305      	movs	r3, #5
 8001d18:	e008      	b.n	8001d2c <HAL_GPIO_Init+0x228>
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x228>
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e004      	b.n	8001d2c <HAL_GPIO_Init+0x228>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e002      	b.n	8001d2c <HAL_GPIO_Init+0x228>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x228>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	f002 0203 	and.w	r2, r2, #3
 8001d32:	0092      	lsls	r2, r2, #2
 8001d34:	4093      	lsls	r3, r2
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d3c:	4935      	ldr	r1, [pc, #212]	@ (8001e14 <HAL_GPIO_Init+0x310>)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e38 <HAL_GPIO_Init+0x334>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d6e:	4a32      	ldr	r2, [pc, #200]	@ (8001e38 <HAL_GPIO_Init+0x334>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d74:	4b30      	ldr	r3, [pc, #192]	@ (8001e38 <HAL_GPIO_Init+0x334>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d98:	4a27      	ldr	r2, [pc, #156]	@ (8001e38 <HAL_GPIO_Init+0x334>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d9e:	4b26      	ldr	r3, [pc, #152]	@ (8001e38 <HAL_GPIO_Init+0x334>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e38 <HAL_GPIO_Init+0x334>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e38 <HAL_GPIO_Init+0x334>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dec:	4a12      	ldr	r2, [pc, #72]	@ (8001e38 <HAL_GPIO_Init+0x334>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b0f      	cmp	r3, #15
 8001dfc:	f67f ae90 	bls.w	8001b20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3724      	adds	r7, #36	@ 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40013800 	.word	0x40013800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020800 	.word	0x40020800
 8001e24:	40020c00 	.word	0x40020c00
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40021400 	.word	0x40021400
 8001e30:	40021800 	.word	0x40021800
 8001e34:	40021c00 	.word	0x40021c00
 8001e38:	40013c00 	.word	0x40013c00

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e58:	e003      	b.n	8001e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e5a:	887b      	ldrh	r3, [r7, #2]
 8001e5c:	041a      	lsls	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e267      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d075      	beq.n	8001f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e8e:	4b88      	ldr	r3, [pc, #544]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d00c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9a:	4b85      	ldr	r3, [pc, #532]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d112      	bne.n	8001ecc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ea6:	4b82      	ldr	r3, [pc, #520]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eb2:	d10b      	bne.n	8001ecc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	4b7e      	ldr	r3, [pc, #504]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d05b      	beq.n	8001f78 <HAL_RCC_OscConfig+0x108>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d157      	bne.n	8001f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e242      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed4:	d106      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x74>
 8001ed6:	4b76      	ldr	r3, [pc, #472]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a75      	ldr	r2, [pc, #468]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e01d      	b.n	8001f20 <HAL_RCC_OscConfig+0xb0>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x98>
 8001eee:	4b70      	ldr	r3, [pc, #448]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a6f      	ldr	r2, [pc, #444]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b6d      	ldr	r3, [pc, #436]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a6c      	ldr	r2, [pc, #432]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e00b      	b.n	8001f20 <HAL_RCC_OscConfig+0xb0>
 8001f08:	4b69      	ldr	r3, [pc, #420]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a68      	ldr	r2, [pc, #416]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b66      	ldr	r3, [pc, #408]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a65      	ldr	r2, [pc, #404]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff f8a8 	bl	800107c <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f30:	f7ff f8a4 	bl	800107c <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	@ 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e207      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b5b      	ldr	r3, [pc, #364]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0xc0>
 8001f4e:	e014      	b.n	8001f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff f894 	bl	800107c <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff f890 	bl	800107c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	@ 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e1f3      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	4b51      	ldr	r3, [pc, #324]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0xe8>
 8001f76:	e000      	b.n	8001f7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d063      	beq.n	800204e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f86:	4b4a      	ldr	r3, [pc, #296]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f92:	4b47      	ldr	r3, [pc, #284]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d11c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f9e:	4b44      	ldr	r3, [pc, #272]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d116      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	4b41      	ldr	r3, [pc, #260]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x152>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e1c7      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4937      	ldr	r1, [pc, #220]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	e03a      	b.n	800204e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d020      	beq.n	8002022 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe0:	4b34      	ldr	r3, [pc, #208]	@ (80020b4 <HAL_RCC_OscConfig+0x244>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7ff f849 	bl	800107c <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fee:	f7ff f845 	bl	800107c <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e1a8      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	4b2b      	ldr	r3, [pc, #172]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200c:	4b28      	ldr	r3, [pc, #160]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4925      	ldr	r1, [pc, #148]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 800201c:	4313      	orrs	r3, r2
 800201e:	600b      	str	r3, [r1, #0]
 8002020:	e015      	b.n	800204e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002022:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <HAL_RCC_OscConfig+0x244>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7ff f828 	bl	800107c <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002030:	f7ff f824 	bl	800107c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e187      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	4b1b      	ldr	r3, [pc, #108]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d036      	beq.n	80020c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d016      	beq.n	8002090 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002062:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <HAL_RCC_OscConfig+0x248>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7ff f808 	bl	800107c <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002070:	f7ff f804 	bl	800107c <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e167      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002082:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <HAL_RCC_OscConfig+0x240>)
 8002084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x200>
 800208e:	e01b      	b.n	80020c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002090:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <HAL_RCC_OscConfig+0x248>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002096:	f7fe fff1 	bl	800107c <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209c:	e00e      	b.n	80020bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209e:	f7fe ffed 	bl	800107c <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d907      	bls.n	80020bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e150      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
 80020b0:	40023800 	.word	0x40023800
 80020b4:	42470000 	.word	0x42470000
 80020b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020bc:	4b88      	ldr	r3, [pc, #544]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1ea      	bne.n	800209e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8097 	beq.w	8002204 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020da:	4b81      	ldr	r3, [pc, #516]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10f      	bne.n	8002106 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	4b7d      	ldr	r3, [pc, #500]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	4a7c      	ldr	r2, [pc, #496]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f6:	4b7a      	ldr	r3, [pc, #488]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002102:	2301      	movs	r3, #1
 8002104:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002106:	4b77      	ldr	r3, [pc, #476]	@ (80022e4 <HAL_RCC_OscConfig+0x474>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d118      	bne.n	8002144 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002112:	4b74      	ldr	r3, [pc, #464]	@ (80022e4 <HAL_RCC_OscConfig+0x474>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a73      	ldr	r2, [pc, #460]	@ (80022e4 <HAL_RCC_OscConfig+0x474>)
 8002118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800211c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211e:	f7fe ffad 	bl	800107c <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002126:	f7fe ffa9 	bl	800107c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e10c      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	4b6a      	ldr	r3, [pc, #424]	@ (80022e4 <HAL_RCC_OscConfig+0x474>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x2ea>
 800214c:	4b64      	ldr	r3, [pc, #400]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002150:	4a63      	ldr	r2, [pc, #396]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6713      	str	r3, [r2, #112]	@ 0x70
 8002158:	e01c      	b.n	8002194 <HAL_RCC_OscConfig+0x324>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b05      	cmp	r3, #5
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x30c>
 8002162:	4b5f      	ldr	r3, [pc, #380]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002166:	4a5e      	ldr	r2, [pc, #376]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	6713      	str	r3, [r2, #112]	@ 0x70
 800216e:	4b5c      	ldr	r3, [pc, #368]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002172:	4a5b      	ldr	r2, [pc, #364]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6713      	str	r3, [r2, #112]	@ 0x70
 800217a:	e00b      	b.n	8002194 <HAL_RCC_OscConfig+0x324>
 800217c:	4b58      	ldr	r3, [pc, #352]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002180:	4a57      	ldr	r2, [pc, #348]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	6713      	str	r3, [r2, #112]	@ 0x70
 8002188:	4b55      	ldr	r3, [pc, #340]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218c:	4a54      	ldr	r2, [pc, #336]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 800218e:	f023 0304 	bic.w	r3, r3, #4
 8002192:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d015      	beq.n	80021c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219c:	f7fe ff6e 	bl	800107c <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a2:	e00a      	b.n	80021ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a4:	f7fe ff6a 	bl	800107c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e0cb      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ba:	4b49      	ldr	r3, [pc, #292]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0ee      	beq.n	80021a4 <HAL_RCC_OscConfig+0x334>
 80021c6:	e014      	b.n	80021f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c8:	f7fe ff58 	bl	800107c <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7fe ff54 	bl	800107c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e0b5      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e6:	4b3e      	ldr	r3, [pc, #248]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ee      	bne.n	80021d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f2:	7dfb      	ldrb	r3, [r7, #23]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f8:	4b39      	ldr	r3, [pc, #228]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	4a38      	ldr	r2, [pc, #224]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 80021fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002202:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80a1 	beq.w	8002350 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800220e:	4b34      	ldr	r3, [pc, #208]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b08      	cmp	r3, #8
 8002218:	d05c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d141      	bne.n	80022a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002222:	4b31      	ldr	r3, [pc, #196]	@ (80022e8 <HAL_RCC_OscConfig+0x478>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7fe ff28 	bl	800107c <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002230:	f7fe ff24 	bl	800107c <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e087      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002242:	4b27      	ldr	r3, [pc, #156]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69da      	ldr	r2, [r3, #28]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	019b      	lsls	r3, r3, #6
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	3b01      	subs	r3, #1
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	491b      	ldr	r1, [pc, #108]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002278:	4b1b      	ldr	r3, [pc, #108]	@ (80022e8 <HAL_RCC_OscConfig+0x478>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7fe fefd 	bl	800107c <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002286:	f7fe fef9 	bl	800107c <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e05c      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002298:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x416>
 80022a4:	e054      	b.n	8002350 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <HAL_RCC_OscConfig+0x478>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7fe fee6 	bl	800107c <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b4:	f7fe fee2 	bl	800107c <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e045      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <HAL_RCC_OscConfig+0x470>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x444>
 80022d2:	e03d      	b.n	8002350 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d107      	bne.n	80022ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e038      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40007000 	.word	0x40007000
 80022e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022ec:	4b1b      	ldr	r3, [pc, #108]	@ (800235c <HAL_RCC_OscConfig+0x4ec>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d028      	beq.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d121      	bne.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d11a      	bne.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800231c:	4013      	ands	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002324:	4293      	cmp	r3, r2
 8002326:	d111      	bne.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002332:	085b      	lsrs	r3, r3, #1
 8002334:	3b01      	subs	r3, #1
 8002336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d107      	bne.n	800234c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800

08002360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0cc      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002374:	4b68      	ldr	r3, [pc, #416]	@ (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d90c      	bls.n	800239c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4b65      	ldr	r3, [pc, #404]	@ (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b63      	ldr	r3, [pc, #396]	@ (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0b8      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b4:	4b59      	ldr	r3, [pc, #356]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a58      	ldr	r2, [pc, #352]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023cc:	4b53      	ldr	r3, [pc, #332]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4a52      	ldr	r2, [pc, #328]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b50      	ldr	r3, [pc, #320]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	494d      	ldr	r1, [pc, #308]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d044      	beq.n	8002480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b47      	ldr	r3, [pc, #284]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d119      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e07f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d003      	beq.n	800241e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241a:	2b03      	cmp	r3, #3
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241e:	4b3f      	ldr	r3, [pc, #252]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e06f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242e:	4b3b      	ldr	r3, [pc, #236]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e067      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243e:	4b37      	ldr	r3, [pc, #220]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f023 0203 	bic.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4934      	ldr	r1, [pc, #208]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002450:	f7fe fe14 	bl	800107c <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	e00a      	b.n	800246e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7fe fe10 	bl	800107c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e04f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	4b2b      	ldr	r3, [pc, #172]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 020c 	and.w	r2, r3, #12
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	429a      	cmp	r2, r3
 800247e:	d1eb      	bne.n	8002458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002480:	4b25      	ldr	r3, [pc, #148]	@ (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d20c      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b22      	ldr	r3, [pc, #136]	@ (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b20      	ldr	r3, [pc, #128]	@ (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e032      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b4:	4b19      	ldr	r3, [pc, #100]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4916      	ldr	r1, [pc, #88]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d2:	4b12      	ldr	r3, [pc, #72]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	490e      	ldr	r1, [pc, #56]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024e6:	f000 f821 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	490a      	ldr	r1, [pc, #40]	@ (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	5ccb      	ldrb	r3, [r1, r3]
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	4a09      	ldr	r2, [pc, #36]	@ (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002502:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fd74 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023c00 	.word	0x40023c00
 800251c:	40023800 	.word	0x40023800
 8002520:	08005108 	.word	0x08005108
 8002524:	20000008 	.word	0x20000008
 8002528:	2000000c 	.word	0x2000000c

0800252c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002530:	b090      	sub	sp, #64	@ 0x40
 8002532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	637b      	str	r3, [r7, #52]	@ 0x34
 8002538:	2300      	movs	r3, #0
 800253a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800253c:	2300      	movs	r3, #0
 800253e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002544:	4b59      	ldr	r3, [pc, #356]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d00d      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x40>
 8002550:	2b08      	cmp	r3, #8
 8002552:	f200 80a1 	bhi.w	8002698 <HAL_RCC_GetSysClockFreq+0x16c>
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x34>
 800255a:	2b04      	cmp	r3, #4
 800255c:	d003      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x3a>
 800255e:	e09b      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002560:	4b53      	ldr	r3, [pc, #332]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002562:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002564:	e09b      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002566:	4b53      	ldr	r3, [pc, #332]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002568:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800256a:	e098      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800256c:	4b4f      	ldr	r3, [pc, #316]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002574:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002576:	4b4d      	ldr	r3, [pc, #308]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d028      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002582:	4b4a      	ldr	r3, [pc, #296]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	099b      	lsrs	r3, r3, #6
 8002588:	2200      	movs	r2, #0
 800258a:	623b      	str	r3, [r7, #32]
 800258c:	627a      	str	r2, [r7, #36]	@ 0x24
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002594:	2100      	movs	r1, #0
 8002596:	4b47      	ldr	r3, [pc, #284]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002598:	fb03 f201 	mul.w	r2, r3, r1
 800259c:	2300      	movs	r3, #0
 800259e:	fb00 f303 	mul.w	r3, r0, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	4a43      	ldr	r2, [pc, #268]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80025a6:	fba0 1202 	umull	r1, r2, r0, r2
 80025aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025ac:	460a      	mov	r2, r1
 80025ae:	62ba      	str	r2, [r7, #40]	@ 0x28
 80025b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025b2:	4413      	add	r3, r2
 80025b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025b8:	2200      	movs	r2, #0
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	61fa      	str	r2, [r7, #28]
 80025be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025c6:	f7fd fe5b 	bl	8000280 <__aeabi_uldivmod>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4613      	mov	r3, r2
 80025d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025d2:	e053      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d4:	4b35      	ldr	r3, [pc, #212]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	099b      	lsrs	r3, r3, #6
 80025da:	2200      	movs	r2, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	617a      	str	r2, [r7, #20]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025e6:	f04f 0b00 	mov.w	fp, #0
 80025ea:	4652      	mov	r2, sl
 80025ec:	465b      	mov	r3, fp
 80025ee:	f04f 0000 	mov.w	r0, #0
 80025f2:	f04f 0100 	mov.w	r1, #0
 80025f6:	0159      	lsls	r1, r3, #5
 80025f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025fc:	0150      	lsls	r0, r2, #5
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	ebb2 080a 	subs.w	r8, r2, sl
 8002606:	eb63 090b 	sbc.w	r9, r3, fp
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002616:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800261a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800261e:	ebb2 0408 	subs.w	r4, r2, r8
 8002622:	eb63 0509 	sbc.w	r5, r3, r9
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	00eb      	lsls	r3, r5, #3
 8002630:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002634:	00e2      	lsls	r2, r4, #3
 8002636:	4614      	mov	r4, r2
 8002638:	461d      	mov	r5, r3
 800263a:	eb14 030a 	adds.w	r3, r4, sl
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	eb45 030b 	adc.w	r3, r5, fp
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002652:	4629      	mov	r1, r5
 8002654:	028b      	lsls	r3, r1, #10
 8002656:	4621      	mov	r1, r4
 8002658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800265c:	4621      	mov	r1, r4
 800265e:	028a      	lsls	r2, r1, #10
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002666:	2200      	movs	r2, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	60fa      	str	r2, [r7, #12]
 800266c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002670:	f7fd fe06 	bl	8000280 <__aeabi_uldivmod>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4613      	mov	r3, r2
 800267a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800267c:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	3301      	adds	r3, #1
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800268c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800268e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002696:	e002      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002698:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800269a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800269c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800269e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3740      	adds	r7, #64	@ 0x40
 80026a4:	46bd      	mov	sp, r7
 80026a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	00f42400 	.word	0x00f42400
 80026b4:	017d7840 	.word	0x017d7840

080026b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026bc:	4b03      	ldr	r3, [pc, #12]	@ (80026cc <HAL_RCC_GetHCLKFreq+0x14>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000008 	.word	0x20000008

080026d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026d4:	f7ff fff0 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0a9b      	lsrs	r3, r3, #10
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	@ (80026f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	08005118 	.word	0x08005118

080026f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026fc:	f7ff ffdc 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	0b5b      	lsrs	r3, r3, #13
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4903      	ldr	r1, [pc, #12]	@ (800271c <HAL_RCC_GetPCLK2Freq+0x24>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800
 800271c:	08005118 	.word	0x08005118

08002720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e042      	b.n	80027b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe faba 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2224      	movs	r2, #36	@ 0x24
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 ff77 	bl	8003658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08c      	sub	sp, #48	@ 0x30
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d156      	bne.n	8002888 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_UART_Transmit_DMA+0x26>
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e04f      	b.n	800288a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	88fa      	ldrh	r2, [r7, #6]
 80027f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2221      	movs	r2, #33	@ 0x21
 8002806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280e:	4a21      	ldr	r2, [pc, #132]	@ (8002894 <HAL_UART_Transmit_DMA+0xd4>)
 8002810:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002816:	4a20      	ldr	r2, [pc, #128]	@ (8002898 <HAL_UART_Transmit_DMA+0xd8>)
 8002818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281e:	4a1f      	ldr	r2, [pc, #124]	@ (800289c <HAL_UART_Transmit_DMA+0xdc>)
 8002820:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002826:	2200      	movs	r2, #0
 8002828:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800282a:	f107 0308 	add.w	r3, r7, #8
 800282e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002836:	6819      	ldr	r1, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	3304      	adds	r3, #4
 800283e:	461a      	mov	r2, r3
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	f7fe fe0b 	bl	800145c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800284e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3314      	adds	r3, #20
 8002856:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	e853 3f00 	ldrex	r3, [r3]
 800285e:	617b      	str	r3, [r7, #20]
   return(result);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002866:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	3314      	adds	r3, #20
 800286e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002870:	627a      	str	r2, [r7, #36]	@ 0x24
 8002872:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002874:	6a39      	ldr	r1, [r7, #32]
 8002876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002878:	e841 2300 	strex	r3, r2, [r1]
 800287c:	61fb      	str	r3, [r7, #28]
   return(result);
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e5      	bne.n	8002850 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	e000      	b.n	800288a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	3730      	adds	r7, #48	@ 0x30
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	08002ee5 	.word	0x08002ee5
 8002898:	08002f7f 	.word	0x08002f7f
 800289c:	08003103 	.word	0x08003103

080028a0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08c      	sub	sp, #48	@ 0x30
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	4613      	mov	r3, r2
 80028ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d14a      	bne.n	8002950 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e043      	b.n	8002952 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	461a      	mov	r2, r3
 80028da:	68b9      	ldr	r1, [r7, #8]
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fc5b 	bl	8003198 <UART_Start_Receive_DMA>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80028e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d12c      	bne.n	800294a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d125      	bne.n	8002944 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028f8:	2300      	movs	r3, #0
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	330c      	adds	r3, #12
 8002914:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	e853 3f00 	ldrex	r3, [r3]
 800291c:	617b      	str	r3, [r7, #20]
   return(result);
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f043 0310 	orr.w	r3, r3, #16
 8002924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	330c      	adds	r3, #12
 800292c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800292e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002932:	6a39      	ldr	r1, [r7, #32]
 8002934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002936:	e841 2300 	strex	r3, r2, [r1]
 800293a:	61fb      	str	r3, [r7, #28]
   return(result);
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1e5      	bne.n	800290e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8002942:	e002      	b.n	800294a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800294a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800294e:	e000      	b.n	8002952 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002950:	2302      	movs	r3, #2
  }
}
 8002952:	4618      	mov	r0, r3
 8002954:	3730      	adds	r7, #48	@ 0x30
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b0ba      	sub	sp, #232	@ 0xe8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002988:	2300      	movs	r3, #0
 800298a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800298e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800299a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10f      	bne.n	80029c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d009      	beq.n	80029c2 <HAL_UART_IRQHandler+0x66>
 80029ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fd8d 	bl	80034da <UART_Receive_IT>
      return;
 80029c0:	e25b      	b.n	8002e7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 80de 	beq.w	8002b88 <HAL_UART_IRQHandler+0x22c>
 80029cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d106      	bne.n	80029e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80d1 	beq.w	8002b88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00b      	beq.n	8002a0a <HAL_UART_IRQHandler+0xae>
 80029f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00b      	beq.n	8002a2e <HAL_UART_IRQHandler+0xd2>
 8002a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a26:	f043 0202 	orr.w	r2, r3, #2
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00b      	beq.n	8002a52 <HAL_UART_IRQHandler+0xf6>
 8002a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4a:	f043 0204 	orr.w	r2, r3, #4
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d011      	beq.n	8002a82 <HAL_UART_IRQHandler+0x126>
 8002a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7a:	f043 0208 	orr.w	r2, r3, #8
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 81f2 	beq.w	8002e70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_UART_IRQHandler+0x14e>
 8002a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fd18 	bl	80034da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab4:	2b40      	cmp	r3, #64	@ 0x40
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <HAL_UART_IRQHandler+0x17a>
 8002ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d04f      	beq.n	8002b76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fc20 	bl	800331c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae6:	2b40      	cmp	r3, #64	@ 0x40
 8002ae8:	d141      	bne.n	8002b6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3314      	adds	r3, #20
 8002af0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002af8:	e853 3f00 	ldrex	r3, [r3]
 8002afc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3314      	adds	r3, #20
 8002b12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b26:	e841 2300 	strex	r3, r2, [r1]
 8002b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1d9      	bne.n	8002aea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d013      	beq.n	8002b66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b42:	4a7e      	ldr	r2, [pc, #504]	@ (8002d3c <HAL_UART_IRQHandler+0x3e0>)
 8002b44:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fd4e 	bl	80015ec <HAL_DMA_Abort_IT>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d016      	beq.n	8002b84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b60:	4610      	mov	r0, r2
 8002b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b64:	e00e      	b.n	8002b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f9b2 	bl	8002ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b6c:	e00a      	b.n	8002b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f9ae 	bl	8002ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b74:	e006      	b.n	8002b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f9aa 	bl	8002ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002b82:	e175      	b.n	8002e70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b84:	bf00      	nop
    return;
 8002b86:	e173      	b.n	8002e70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	f040 814f 	bne.w	8002e30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8148 	beq.w	8002e30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8141 	beq.w	8002e30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bce:	2b40      	cmp	r3, #64	@ 0x40
 8002bd0:	f040 80b6 	bne.w	8002d40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002be0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8145 	beq.w	8002e74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	f080 813e 	bcs.w	8002e74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bfe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c0a:	f000 8088 	beq.w	8002d1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	330c      	adds	r3, #12
 8002c14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c1c:	e853 3f00 	ldrex	r3, [r3]
 8002c20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002c3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c4a:	e841 2300 	strex	r3, r2, [r1]
 8002c4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1d9      	bne.n	8002c0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3314      	adds	r3, #20
 8002c60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c64:	e853 3f00 	ldrex	r3, [r3]
 8002c68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c6c:	f023 0301 	bic.w	r3, r3, #1
 8002c70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3314      	adds	r3, #20
 8002c7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c8a:	e841 2300 	strex	r3, r2, [r1]
 8002c8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002c90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1e1      	bne.n	8002c5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3314      	adds	r3, #20
 8002c9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ca0:	e853 3f00 	ldrex	r3, [r3]
 8002ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002ca6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ca8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	3314      	adds	r3, #20
 8002cb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002cba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002cc0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002cc2:	e841 2300 	strex	r3, r2, [r1]
 8002cc6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002cc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1e3      	bne.n	8002c96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ce6:	e853 3f00 	ldrex	r3, [r3]
 8002cea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cee:	f023 0310 	bic.w	r3, r3, #16
 8002cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	330c      	adds	r3, #12
 8002cfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002d00:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d02:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d08:	e841 2300 	strex	r3, r2, [r1]
 8002d0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1e3      	bne.n	8002cdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe fbf7 	bl	800150c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2202      	movs	r2, #2
 8002d22:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4619      	mov	r1, r3
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7fd fc33 	bl	80005a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d3a:	e09b      	b.n	8002e74 <HAL_UART_IRQHandler+0x518>
 8002d3c:	080033e3 	.word	0x080033e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 808e 	beq.w	8002e78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8089 	beq.w	8002e78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	330c      	adds	r3, #12
 8002d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d70:	e853 3f00 	ldrex	r3, [r3]
 8002d74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	330c      	adds	r3, #12
 8002d86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002d8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d92:	e841 2300 	strex	r3, r2, [r1]
 8002d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1e3      	bne.n	8002d66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3314      	adds	r3, #20
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	e853 3f00 	ldrex	r3, [r3]
 8002dac:	623b      	str	r3, [r7, #32]
   return(result);
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3314      	adds	r3, #20
 8002dbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002dc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8002dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dca:	e841 2300 	strex	r3, r2, [r1]
 8002dce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1e3      	bne.n	8002d9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	330c      	adds	r3, #12
 8002dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	e853 3f00 	ldrex	r3, [r3]
 8002df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0310 	bic.w	r3, r3, #16
 8002dfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002e08:	61fa      	str	r2, [r7, #28]
 8002e0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0c:	69b9      	ldr	r1, [r7, #24]
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	e841 2300 	strex	r3, r2, [r1]
 8002e14:	617b      	str	r3, [r7, #20]
   return(result);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e3      	bne.n	8002de4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e26:	4619      	mov	r1, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7fd fbb9 	bl	80005a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e2e:	e023      	b.n	8002e78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d009      	beq.n	8002e50 <HAL_UART_IRQHandler+0x4f4>
 8002e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fade 	bl	800340a <UART_Transmit_IT>
    return;
 8002e4e:	e014      	b.n	8002e7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00e      	beq.n	8002e7a <HAL_UART_IRQHandler+0x51e>
 8002e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fb1e 	bl	80034aa <UART_EndTransmit_IT>
    return;
 8002e6e:	e004      	b.n	8002e7a <HAL_UART_IRQHandler+0x51e>
    return;
 8002e70:	bf00      	nop
 8002e72:	e002      	b.n	8002e7a <HAL_UART_IRQHandler+0x51e>
      return;
 8002e74:	bf00      	nop
 8002e76:	e000      	b.n	8002e7a <HAL_UART_IRQHandler+0x51e>
      return;
 8002e78:	bf00      	nop
  }
}
 8002e7a:	37e8      	adds	r7, #232	@ 0xe8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b090      	sub	sp, #64	@ 0x40
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d137      	bne.n	8002f70 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f02:	2200      	movs	r2, #0
 8002f04:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3314      	adds	r3, #20
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	623b      	str	r3, [r7, #32]
   return(result);
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3314      	adds	r3, #20
 8002f24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f26:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f2e:	e841 2300 	strex	r3, r2, [r1]
 8002f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1e5      	bne.n	8002f06 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	330c      	adds	r3, #12
 8002f40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	e853 3f00 	ldrex	r3, [r3]
 8002f48:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	330c      	adds	r3, #12
 8002f58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f5a:	61fa      	str	r2, [r7, #28]
 8002f5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5e:	69b9      	ldr	r1, [r7, #24]
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	e841 2300 	strex	r3, r2, [r1]
 8002f66:	617b      	str	r3, [r7, #20]
   return(result);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1e5      	bne.n	8002f3a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f6e:	e002      	b.n	8002f76 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002f70:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002f72:	f7ff ff85 	bl	8002e80 <HAL_UART_TxCpltCallback>
}
 8002f76:	bf00      	nop
 8002f78:	3740      	adds	r7, #64	@ 0x40
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7ff ff81 	bl	8002e94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b09c      	sub	sp, #112	@ 0x70
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d172      	bne.n	800309c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002fb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fb8:	2200      	movs	r2, #0
 8002fba:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fc6:	e853 3f00 	ldrex	r3, [r3]
 8002fca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002fcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002fdc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002fde:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fe2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fe4:	e841 2300 	strex	r3, r2, [r1]
 8002fe8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e5      	bne.n	8002fbc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3314      	adds	r3, #20
 8002ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ffa:	e853 3f00 	ldrex	r3, [r3]
 8002ffe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	667b      	str	r3, [r7, #100]	@ 0x64
 8003008:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3314      	adds	r3, #20
 800300e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003010:	647a      	str	r2, [r7, #68]	@ 0x44
 8003012:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003014:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003018:	e841 2300 	strex	r3, r2, [r1]
 800301c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800301e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e5      	bne.n	8002ff0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3314      	adds	r3, #20
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302e:	e853 3f00 	ldrex	r3, [r3]
 8003032:	623b      	str	r3, [r7, #32]
   return(result);
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800303a:	663b      	str	r3, [r7, #96]	@ 0x60
 800303c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3314      	adds	r3, #20
 8003042:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003044:	633a      	str	r2, [r7, #48]	@ 0x30
 8003046:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003048:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800304a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800304c:	e841 2300 	strex	r3, r2, [r1]
 8003050:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e5      	bne.n	8003024 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800305a:	2220      	movs	r2, #32
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003064:	2b01      	cmp	r3, #1
 8003066:	d119      	bne.n	800309c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	330c      	adds	r3, #12
 800306e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	e853 3f00 	ldrex	r3, [r3]
 8003076:	60fb      	str	r3, [r7, #12]
   return(result);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0310 	bic.w	r3, r3, #16
 800307e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003080:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	330c      	adds	r3, #12
 8003086:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003088:	61fa      	str	r2, [r7, #28]
 800308a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	69b9      	ldr	r1, [r7, #24]
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	e841 2300 	strex	r3, r2, [r1]
 8003094:	617b      	str	r3, [r7, #20]
   return(result);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e5      	bne.n	8003068 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800309c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800309e:	2200      	movs	r2, #0
 80030a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d106      	bne.n	80030b8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030ae:	4619      	mov	r1, r3
 80030b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80030b2:	f7fd fa75 	bl	80005a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030b6:	e002      	b.n	80030be <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80030b8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80030ba:	f7ff fef5 	bl	8002ea8 <HAL_UART_RxCpltCallback>
}
 80030be:	bf00      	nop
 80030c0:	3770      	adds	r7, #112	@ 0x70
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d108      	bne.n	80030f4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	4619      	mov	r1, r3
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7fd fa57 	bl	80005a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030f2:	e002      	b.n	80030fa <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f7ff fee1 	bl	8002ebc <HAL_UART_RxHalfCpltCallback>
}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003112:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311e:	2b80      	cmp	r3, #128	@ 0x80
 8003120:	bf0c      	ite	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	2300      	movne	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b21      	cmp	r3, #33	@ 0x21
 8003134:	d108      	bne.n	8003148 <UART_DMAError+0x46>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2200      	movs	r2, #0
 8003140:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003142:	68b8      	ldr	r0, [r7, #8]
 8003144:	f000 f8c2 	bl	80032cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003152:	2b40      	cmp	r3, #64	@ 0x40
 8003154:	bf0c      	ite	eq
 8003156:	2301      	moveq	r3, #1
 8003158:	2300      	movne	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b22      	cmp	r3, #34	@ 0x22
 8003168:	d108      	bne.n	800317c <UART_DMAError+0x7a>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2200      	movs	r2, #0
 8003174:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003176:	68b8      	ldr	r0, [r7, #8]
 8003178:	f000 f8d0 	bl	800331c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003180:	f043 0210 	orr.w	r2, r3, #16
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003188:	68b8      	ldr	r0, [r7, #8]
 800318a:	f7ff fea1 	bl	8002ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800318e:	bf00      	nop
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b098      	sub	sp, #96	@ 0x60
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	4613      	mov	r3, r2
 80031a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	88fa      	ldrh	r2, [r7, #6]
 80031b0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2222      	movs	r2, #34	@ 0x22
 80031bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c4:	4a3e      	ldr	r2, [pc, #248]	@ (80032c0 <UART_Start_Receive_DMA+0x128>)
 80031c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031cc:	4a3d      	ldr	r2, [pc, #244]	@ (80032c4 <UART_Start_Receive_DMA+0x12c>)
 80031ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d4:	4a3c      	ldr	r2, [pc, #240]	@ (80032c8 <UART_Start_Receive_DMA+0x130>)
 80031d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031dc:	2200      	movs	r2, #0
 80031de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80031e0:	f107 0308 	add.w	r3, r7, #8
 80031e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3304      	adds	r3, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	f7fe f930 	bl	800145c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d019      	beq.n	800324e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003224:	e853 3f00 	ldrex	r3, [r3]
 8003228:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800322a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800322c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003230:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	330c      	adds	r3, #12
 8003238:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800323a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800323c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003240:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003242:	e841 2300 	strex	r3, r2, [r1]
 8003246:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1e5      	bne.n	800321a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3314      	adds	r3, #20
 8003254:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003258:	e853 3f00 	ldrex	r3, [r3]
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800325e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	657b      	str	r3, [r7, #84]	@ 0x54
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3314      	adds	r3, #20
 800326c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800326e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003270:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003272:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003274:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003276:	e841 2300 	strex	r3, r2, [r1]
 800327a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800327c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1e5      	bne.n	800324e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3314      	adds	r3, #20
 8003288:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	e853 3f00 	ldrex	r3, [r3]
 8003290:	617b      	str	r3, [r7, #20]
   return(result);
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003298:	653b      	str	r3, [r7, #80]	@ 0x50
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3314      	adds	r3, #20
 80032a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80032a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80032a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a6:	6a39      	ldr	r1, [r7, #32]
 80032a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032aa:	e841 2300 	strex	r3, r2, [r1]
 80032ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1e5      	bne.n	8003282 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3760      	adds	r7, #96	@ 0x60
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	08002f9b 	.word	0x08002f9b
 80032c4:	080030c7 	.word	0x080030c7
 80032c8:	08003103 	.word	0x08003103

080032cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b089      	sub	sp, #36	@ 0x24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	e853 3f00 	ldrex	r3, [r3]
 80032e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	61ba      	str	r2, [r7, #24]
 80032f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	6979      	ldr	r1, [r7, #20]
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	e841 2300 	strex	r3, r2, [r1]
 8003300:	613b      	str	r3, [r7, #16]
   return(result);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e5      	bne.n	80032d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003310:	bf00      	nop
 8003312:	3724      	adds	r7, #36	@ 0x24
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800331c:	b480      	push	{r7}
 800331e:	b095      	sub	sp, #84	@ 0x54
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	330c      	adds	r3, #12
 800332a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332e:	e853 3f00 	ldrex	r3, [r3]
 8003332:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003336:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800333a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	330c      	adds	r3, #12
 8003342:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003344:	643a      	str	r2, [r7, #64]	@ 0x40
 8003346:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003348:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800334a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800334c:	e841 2300 	strex	r3, r2, [r1]
 8003350:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e5      	bne.n	8003324 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3314      	adds	r3, #20
 800335e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	e853 3f00 	ldrex	r3, [r3]
 8003366:	61fb      	str	r3, [r7, #28]
   return(result);
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3314      	adds	r3, #20
 8003376:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003378:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800337a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800337e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003380:	e841 2300 	strex	r3, r2, [r1]
 8003384:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e5      	bne.n	8003358 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	2b01      	cmp	r3, #1
 8003392:	d119      	bne.n	80033c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f023 0310 	bic.w	r3, r3, #16
 80033aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	330c      	adds	r3, #12
 80033b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033b4:	61ba      	str	r2, [r7, #24]
 80033b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6979      	ldr	r1, [r7, #20]
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	613b      	str	r3, [r7, #16]
   return(result);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e5      	bne.n	8003394 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033d6:	bf00      	nop
 80033d8:	3754      	adds	r7, #84	@ 0x54
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff fd67 	bl	8002ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800340a:	b480      	push	{r7}
 800340c:	b085      	sub	sp, #20
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b21      	cmp	r3, #33	@ 0x21
 800341c:	d13e      	bne.n	800349c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003426:	d114      	bne.n	8003452 <UART_Transmit_IT+0x48>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d110      	bne.n	8003452 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003444:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	1c9a      	adds	r2, r3, #2
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	621a      	str	r2, [r3, #32]
 8003450:	e008      	b.n	8003464 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	1c59      	adds	r1, r3, #1
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6211      	str	r1, [r2, #32]
 800345c:	781a      	ldrb	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29b      	uxth	r3, r3
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4619      	mov	r1, r3
 8003472:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10f      	bne.n	8003498 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003486:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003496:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	e000      	b.n	800349e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800349c:	2302      	movs	r3, #2
  }
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff fcd8 	bl	8002e80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b08c      	sub	sp, #48	@ 0x30
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b22      	cmp	r3, #34	@ 0x22
 80034ec:	f040 80ae 	bne.w	800364c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f8:	d117      	bne.n	800352a <UART_Receive_IT+0x50>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d113      	bne.n	800352a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003518:	b29a      	uxth	r2, r3
 800351a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003522:	1c9a      	adds	r2, r3, #2
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	629a      	str	r2, [r3, #40]	@ 0x28
 8003528:	e026      	b.n	8003578 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003530:	2300      	movs	r3, #0
 8003532:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800353c:	d007      	beq.n	800354e <UART_Receive_IT+0x74>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10a      	bne.n	800355c <UART_Receive_IT+0x82>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003558:	701a      	strb	r2, [r3, #0]
 800355a:	e008      	b.n	800356e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003568:	b2da      	uxtb	r2, r3
 800356a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29b      	uxth	r3, r3
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4619      	mov	r1, r3
 8003586:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003588:	2b00      	cmp	r3, #0
 800358a:	d15d      	bne.n	8003648 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0220 	bic.w	r2, r2, #32
 800359a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d135      	bne.n	800363e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	330c      	adds	r3, #12
 80035de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	e853 3f00 	ldrex	r3, [r3]
 80035e6:	613b      	str	r3, [r7, #16]
   return(result);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f023 0310 	bic.w	r3, r3, #16
 80035ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	330c      	adds	r3, #12
 80035f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f8:	623a      	str	r2, [r7, #32]
 80035fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	69f9      	ldr	r1, [r7, #28]
 80035fe:	6a3a      	ldr	r2, [r7, #32]
 8003600:	e841 2300 	strex	r3, r2, [r1]
 8003604:	61bb      	str	r3, [r7, #24]
   return(result);
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e5      	bne.n	80035d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	2b10      	cmp	r3, #16
 8003618:	d10a      	bne.n	8003630 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003634:	4619      	mov	r1, r3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fc ffb2 	bl	80005a0 <HAL_UARTEx_RxEventCallback>
 800363c:	e002      	b.n	8003644 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff fc32 	bl	8002ea8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	e002      	b.n	800364e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	e000      	b.n	800364e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
  }
}
 800364e:	4618      	mov	r0, r3
 8003650:	3730      	adds	r7, #48	@ 0x30
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800365c:	b0c0      	sub	sp, #256	@ 0x100
 800365e:	af00      	add	r7, sp, #0
 8003660:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003674:	68d9      	ldr	r1, [r3, #12]
 8003676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	ea40 0301 	orr.w	r3, r0, r1
 8003680:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	431a      	orrs	r2, r3
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	431a      	orrs	r2, r3
 8003698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80036b0:	f021 010c 	bic.w	r1, r1, #12
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036be:	430b      	orrs	r3, r1
 80036c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80036ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d2:	6999      	ldr	r1, [r3, #24]
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	ea40 0301 	orr.w	r3, r0, r1
 80036de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	4b8f      	ldr	r3, [pc, #572]	@ (8003924 <UART_SetConfig+0x2cc>)
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d005      	beq.n	80036f8 <UART_SetConfig+0xa0>
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4b8d      	ldr	r3, [pc, #564]	@ (8003928 <UART_SetConfig+0x2d0>)
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d104      	bne.n	8003702 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036f8:	f7fe fffe 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
 80036fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003700:	e003      	b.n	800370a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003702:	f7fe ffe5 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8003706:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800370a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003714:	f040 810c 	bne.w	8003930 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800371c:	2200      	movs	r2, #0
 800371e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003722:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003726:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800372a:	4622      	mov	r2, r4
 800372c:	462b      	mov	r3, r5
 800372e:	1891      	adds	r1, r2, r2
 8003730:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003732:	415b      	adcs	r3, r3
 8003734:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003736:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800373a:	4621      	mov	r1, r4
 800373c:	eb12 0801 	adds.w	r8, r2, r1
 8003740:	4629      	mov	r1, r5
 8003742:	eb43 0901 	adc.w	r9, r3, r1
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800375a:	4690      	mov	r8, r2
 800375c:	4699      	mov	r9, r3
 800375e:	4623      	mov	r3, r4
 8003760:	eb18 0303 	adds.w	r3, r8, r3
 8003764:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003768:	462b      	mov	r3, r5
 800376a:	eb49 0303 	adc.w	r3, r9, r3
 800376e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800377e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003782:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003786:	460b      	mov	r3, r1
 8003788:	18db      	adds	r3, r3, r3
 800378a:	653b      	str	r3, [r7, #80]	@ 0x50
 800378c:	4613      	mov	r3, r2
 800378e:	eb42 0303 	adc.w	r3, r2, r3
 8003792:	657b      	str	r3, [r7, #84]	@ 0x54
 8003794:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003798:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800379c:	f7fc fd70 	bl	8000280 <__aeabi_uldivmod>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4b61      	ldr	r3, [pc, #388]	@ (800392c <UART_SetConfig+0x2d4>)
 80037a6:	fba3 2302 	umull	r2, r3, r3, r2
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	011c      	lsls	r4, r3, #4
 80037ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80037bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80037c0:	4642      	mov	r2, r8
 80037c2:	464b      	mov	r3, r9
 80037c4:	1891      	adds	r1, r2, r2
 80037c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80037c8:	415b      	adcs	r3, r3
 80037ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037d0:	4641      	mov	r1, r8
 80037d2:	eb12 0a01 	adds.w	sl, r2, r1
 80037d6:	4649      	mov	r1, r9
 80037d8:	eb43 0b01 	adc.w	fp, r3, r1
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037f0:	4692      	mov	sl, r2
 80037f2:	469b      	mov	fp, r3
 80037f4:	4643      	mov	r3, r8
 80037f6:	eb1a 0303 	adds.w	r3, sl, r3
 80037fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037fe:	464b      	mov	r3, r9
 8003800:	eb4b 0303 	adc.w	r3, fp, r3
 8003804:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003814:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003818:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800381c:	460b      	mov	r3, r1
 800381e:	18db      	adds	r3, r3, r3
 8003820:	643b      	str	r3, [r7, #64]	@ 0x40
 8003822:	4613      	mov	r3, r2
 8003824:	eb42 0303 	adc.w	r3, r2, r3
 8003828:	647b      	str	r3, [r7, #68]	@ 0x44
 800382a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800382e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003832:	f7fc fd25 	bl	8000280 <__aeabi_uldivmod>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4611      	mov	r1, r2
 800383c:	4b3b      	ldr	r3, [pc, #236]	@ (800392c <UART_SetConfig+0x2d4>)
 800383e:	fba3 2301 	umull	r2, r3, r3, r1
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2264      	movs	r2, #100	@ 0x64
 8003846:	fb02 f303 	mul.w	r3, r2, r3
 800384a:	1acb      	subs	r3, r1, r3
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003852:	4b36      	ldr	r3, [pc, #216]	@ (800392c <UART_SetConfig+0x2d4>)
 8003854:	fba3 2302 	umull	r2, r3, r3, r2
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003860:	441c      	add	r4, r3
 8003862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003866:	2200      	movs	r2, #0
 8003868:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800386c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003870:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003874:	4642      	mov	r2, r8
 8003876:	464b      	mov	r3, r9
 8003878:	1891      	adds	r1, r2, r2
 800387a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800387c:	415b      	adcs	r3, r3
 800387e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003880:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003884:	4641      	mov	r1, r8
 8003886:	1851      	adds	r1, r2, r1
 8003888:	6339      	str	r1, [r7, #48]	@ 0x30
 800388a:	4649      	mov	r1, r9
 800388c:	414b      	adcs	r3, r1
 800388e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800389c:	4659      	mov	r1, fp
 800389e:	00cb      	lsls	r3, r1, #3
 80038a0:	4651      	mov	r1, sl
 80038a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038a6:	4651      	mov	r1, sl
 80038a8:	00ca      	lsls	r2, r1, #3
 80038aa:	4610      	mov	r0, r2
 80038ac:	4619      	mov	r1, r3
 80038ae:	4603      	mov	r3, r0
 80038b0:	4642      	mov	r2, r8
 80038b2:	189b      	adds	r3, r3, r2
 80038b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038b8:	464b      	mov	r3, r9
 80038ba:	460a      	mov	r2, r1
 80038bc:	eb42 0303 	adc.w	r3, r2, r3
 80038c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038d8:	460b      	mov	r3, r1
 80038da:	18db      	adds	r3, r3, r3
 80038dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038de:	4613      	mov	r3, r2
 80038e0:	eb42 0303 	adc.w	r3, r2, r3
 80038e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038ee:	f7fc fcc7 	bl	8000280 <__aeabi_uldivmod>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4b0d      	ldr	r3, [pc, #52]	@ (800392c <UART_SetConfig+0x2d4>)
 80038f8:	fba3 1302 	umull	r1, r3, r3, r2
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	2164      	movs	r1, #100	@ 0x64
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	3332      	adds	r3, #50	@ 0x32
 800390a:	4a08      	ldr	r2, [pc, #32]	@ (800392c <UART_SetConfig+0x2d4>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	095b      	lsrs	r3, r3, #5
 8003912:	f003 0207 	and.w	r2, r3, #7
 8003916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4422      	add	r2, r4
 800391e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003920:	e106      	b.n	8003b30 <UART_SetConfig+0x4d8>
 8003922:	bf00      	nop
 8003924:	40011000 	.word	0x40011000
 8003928:	40011400 	.word	0x40011400
 800392c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003934:	2200      	movs	r2, #0
 8003936:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800393a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800393e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003942:	4642      	mov	r2, r8
 8003944:	464b      	mov	r3, r9
 8003946:	1891      	adds	r1, r2, r2
 8003948:	6239      	str	r1, [r7, #32]
 800394a:	415b      	adcs	r3, r3
 800394c:	627b      	str	r3, [r7, #36]	@ 0x24
 800394e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003952:	4641      	mov	r1, r8
 8003954:	1854      	adds	r4, r2, r1
 8003956:	4649      	mov	r1, r9
 8003958:	eb43 0501 	adc.w	r5, r3, r1
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	00eb      	lsls	r3, r5, #3
 8003966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800396a:	00e2      	lsls	r2, r4, #3
 800396c:	4614      	mov	r4, r2
 800396e:	461d      	mov	r5, r3
 8003970:	4643      	mov	r3, r8
 8003972:	18e3      	adds	r3, r4, r3
 8003974:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003978:	464b      	mov	r3, r9
 800397a:	eb45 0303 	adc.w	r3, r5, r3
 800397e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800398e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800399e:	4629      	mov	r1, r5
 80039a0:	008b      	lsls	r3, r1, #2
 80039a2:	4621      	mov	r1, r4
 80039a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039a8:	4621      	mov	r1, r4
 80039aa:	008a      	lsls	r2, r1, #2
 80039ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80039b0:	f7fc fc66 	bl	8000280 <__aeabi_uldivmod>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4b60      	ldr	r3, [pc, #384]	@ (8003b3c <UART_SetConfig+0x4e4>)
 80039ba:	fba3 2302 	umull	r2, r3, r3, r2
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	011c      	lsls	r4, r3, #4
 80039c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039d4:	4642      	mov	r2, r8
 80039d6:	464b      	mov	r3, r9
 80039d8:	1891      	adds	r1, r2, r2
 80039da:	61b9      	str	r1, [r7, #24]
 80039dc:	415b      	adcs	r3, r3
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039e4:	4641      	mov	r1, r8
 80039e6:	1851      	adds	r1, r2, r1
 80039e8:	6139      	str	r1, [r7, #16]
 80039ea:	4649      	mov	r1, r9
 80039ec:	414b      	adcs	r3, r1
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039fc:	4659      	mov	r1, fp
 80039fe:	00cb      	lsls	r3, r1, #3
 8003a00:	4651      	mov	r1, sl
 8003a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a06:	4651      	mov	r1, sl
 8003a08:	00ca      	lsls	r2, r1, #3
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4603      	mov	r3, r0
 8003a10:	4642      	mov	r2, r8
 8003a12:	189b      	adds	r3, r3, r2
 8003a14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a18:	464b      	mov	r3, r9
 8003a1a:	460a      	mov	r2, r1
 8003a1c:	eb42 0303 	adc.w	r3, r2, r3
 8003a20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a3c:	4649      	mov	r1, r9
 8003a3e:	008b      	lsls	r3, r1, #2
 8003a40:	4641      	mov	r1, r8
 8003a42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a46:	4641      	mov	r1, r8
 8003a48:	008a      	lsls	r2, r1, #2
 8003a4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a4e:	f7fc fc17 	bl	8000280 <__aeabi_uldivmod>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4611      	mov	r1, r2
 8003a58:	4b38      	ldr	r3, [pc, #224]	@ (8003b3c <UART_SetConfig+0x4e4>)
 8003a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	2264      	movs	r2, #100	@ 0x64
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	1acb      	subs	r3, r1, r3
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	3332      	adds	r3, #50	@ 0x32
 8003a6c:	4a33      	ldr	r2, [pc, #204]	@ (8003b3c <UART_SetConfig+0x4e4>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a78:	441c      	add	r4, r3
 8003a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a7e:	2200      	movs	r2, #0
 8003a80:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a82:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a88:	4642      	mov	r2, r8
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	1891      	adds	r1, r2, r2
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	415b      	adcs	r3, r3
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a98:	4641      	mov	r1, r8
 8003a9a:	1851      	adds	r1, r2, r1
 8003a9c:	6039      	str	r1, [r7, #0]
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	414b      	adcs	r3, r1
 8003aa2:	607b      	str	r3, [r7, #4]
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ab0:	4659      	mov	r1, fp
 8003ab2:	00cb      	lsls	r3, r1, #3
 8003ab4:	4651      	mov	r1, sl
 8003ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aba:	4651      	mov	r1, sl
 8003abc:	00ca      	lsls	r2, r1, #3
 8003abe:	4610      	mov	r0, r2
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	189b      	adds	r3, r3, r2
 8003ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003aca:	464b      	mov	r3, r9
 8003acc:	460a      	mov	r2, r1
 8003ace:	eb42 0303 	adc.w	r3, r2, r3
 8003ad2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ade:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003aec:	4649      	mov	r1, r9
 8003aee:	008b      	lsls	r3, r1, #2
 8003af0:	4641      	mov	r1, r8
 8003af2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003af6:	4641      	mov	r1, r8
 8003af8:	008a      	lsls	r2, r1, #2
 8003afa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003afe:	f7fc fbbf 	bl	8000280 <__aeabi_uldivmod>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4b0d      	ldr	r3, [pc, #52]	@ (8003b3c <UART_SetConfig+0x4e4>)
 8003b08:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	2164      	movs	r1, #100	@ 0x64
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	3332      	adds	r3, #50	@ 0x32
 8003b1a:	4a08      	ldr	r2, [pc, #32]	@ (8003b3c <UART_SetConfig+0x4e4>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	f003 020f 	and.w	r2, r3, #15
 8003b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4422      	add	r2, r4
 8003b2e:	609a      	str	r2, [r3, #8]
}
 8003b30:	bf00      	nop
 8003b32:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b36:	46bd      	mov	sp, r7
 8003b38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b3c:	51eb851f 	.word	0x51eb851f

08003b40 <sniprintf>:
 8003b40:	b40c      	push	{r2, r3}
 8003b42:	b530      	push	{r4, r5, lr}
 8003b44:	4b17      	ldr	r3, [pc, #92]	@ (8003ba4 <sniprintf+0x64>)
 8003b46:	1e0c      	subs	r4, r1, #0
 8003b48:	681d      	ldr	r5, [r3, #0]
 8003b4a:	b09d      	sub	sp, #116	@ 0x74
 8003b4c:	da08      	bge.n	8003b60 <sniprintf+0x20>
 8003b4e:	238b      	movs	r3, #139	@ 0x8b
 8003b50:	602b      	str	r3, [r5, #0]
 8003b52:	f04f 30ff 	mov.w	r0, #4294967295
 8003b56:	b01d      	add	sp, #116	@ 0x74
 8003b58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b5c:	b002      	add	sp, #8
 8003b5e:	4770      	bx	lr
 8003b60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003b64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003b68:	bf14      	ite	ne
 8003b6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003b6e:	4623      	moveq	r3, r4
 8003b70:	9304      	str	r3, [sp, #16]
 8003b72:	9307      	str	r3, [sp, #28]
 8003b74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b78:	9002      	str	r0, [sp, #8]
 8003b7a:	9006      	str	r0, [sp, #24]
 8003b7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b80:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003b82:	ab21      	add	r3, sp, #132	@ 0x84
 8003b84:	a902      	add	r1, sp, #8
 8003b86:	4628      	mov	r0, r5
 8003b88:	9301      	str	r3, [sp, #4]
 8003b8a:	f000 fa21 	bl	8003fd0 <_svfiprintf_r>
 8003b8e:	1c43      	adds	r3, r0, #1
 8003b90:	bfbc      	itt	lt
 8003b92:	238b      	movlt	r3, #139	@ 0x8b
 8003b94:	602b      	strlt	r3, [r5, #0]
 8003b96:	2c00      	cmp	r4, #0
 8003b98:	d0dd      	beq.n	8003b56 <sniprintf+0x16>
 8003b9a:	9b02      	ldr	r3, [sp, #8]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	e7d9      	b.n	8003b56 <sniprintf+0x16>
 8003ba2:	bf00      	nop
 8003ba4:	20000014 	.word	0x20000014

08003ba8 <siscanf>:
 8003ba8:	b40e      	push	{r1, r2, r3}
 8003baa:	b530      	push	{r4, r5, lr}
 8003bac:	b09c      	sub	sp, #112	@ 0x70
 8003bae:	ac1f      	add	r4, sp, #124	@ 0x7c
 8003bb0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8003bb4:	f854 5b04 	ldr.w	r5, [r4], #4
 8003bb8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003bbc:	9002      	str	r0, [sp, #8]
 8003bbe:	9006      	str	r0, [sp, #24]
 8003bc0:	f7fc fb06 	bl	80001d0 <strlen>
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <siscanf+0x4c>)
 8003bc6:	9003      	str	r0, [sp, #12]
 8003bc8:	9007      	str	r0, [sp, #28]
 8003bca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003bcc:	480a      	ldr	r0, [pc, #40]	@ (8003bf8 <siscanf+0x50>)
 8003bce:	9401      	str	r4, [sp, #4]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003bd4:	9314      	str	r3, [sp, #80]	@ 0x50
 8003bd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bda:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003bde:	462a      	mov	r2, r5
 8003be0:	4623      	mov	r3, r4
 8003be2:	a902      	add	r1, sp, #8
 8003be4:	6800      	ldr	r0, [r0, #0]
 8003be6:	f000 fb47 	bl	8004278 <__ssvfiscanf_r>
 8003bea:	b01c      	add	sp, #112	@ 0x70
 8003bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bf0:	b003      	add	sp, #12
 8003bf2:	4770      	bx	lr
 8003bf4:	08003bfd 	.word	0x08003bfd
 8003bf8:	20000014 	.word	0x20000014

08003bfc <__seofread>:
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	4770      	bx	lr

08003c00 <memset>:
 8003c00:	4402      	add	r2, r0
 8003c02:	4603      	mov	r3, r0
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d100      	bne.n	8003c0a <memset+0xa>
 8003c08:	4770      	bx	lr
 8003c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c0e:	e7f9      	b.n	8003c04 <memset+0x4>

08003c10 <strcat>:
 8003c10:	b510      	push	{r4, lr}
 8003c12:	4602      	mov	r2, r0
 8003c14:	7814      	ldrb	r4, [r2, #0]
 8003c16:	4613      	mov	r3, r2
 8003c18:	3201      	adds	r2, #1
 8003c1a:	2c00      	cmp	r4, #0
 8003c1c:	d1fa      	bne.n	8003c14 <strcat+0x4>
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c28:	2a00      	cmp	r2, #0
 8003c2a:	d1f9      	bne.n	8003c20 <strcat+0x10>
 8003c2c:	bd10      	pop	{r4, pc}

08003c2e <strncmp>:
 8003c2e:	b510      	push	{r4, lr}
 8003c30:	b16a      	cbz	r2, 8003c4e <strncmp+0x20>
 8003c32:	3901      	subs	r1, #1
 8003c34:	1884      	adds	r4, r0, r2
 8003c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c3a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d103      	bne.n	8003c4a <strncmp+0x1c>
 8003c42:	42a0      	cmp	r0, r4
 8003c44:	d001      	beq.n	8003c4a <strncmp+0x1c>
 8003c46:	2a00      	cmp	r2, #0
 8003c48:	d1f5      	bne.n	8003c36 <strncmp+0x8>
 8003c4a:	1ad0      	subs	r0, r2, r3
 8003c4c:	bd10      	pop	{r4, pc}
 8003c4e:	4610      	mov	r0, r2
 8003c50:	e7fc      	b.n	8003c4c <strncmp+0x1e>

08003c52 <strncpy>:
 8003c52:	b510      	push	{r4, lr}
 8003c54:	3901      	subs	r1, #1
 8003c56:	4603      	mov	r3, r0
 8003c58:	b132      	cbz	r2, 8003c68 <strncpy+0x16>
 8003c5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003c5e:	f803 4b01 	strb.w	r4, [r3], #1
 8003c62:	3a01      	subs	r2, #1
 8003c64:	2c00      	cmp	r4, #0
 8003c66:	d1f7      	bne.n	8003c58 <strncpy+0x6>
 8003c68:	441a      	add	r2, r3
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d100      	bne.n	8003c72 <strncpy+0x20>
 8003c70:	bd10      	pop	{r4, pc}
 8003c72:	f803 1b01 	strb.w	r1, [r3], #1
 8003c76:	e7f9      	b.n	8003c6c <strncpy+0x1a>

08003c78 <strstr>:
 8003c78:	780a      	ldrb	r2, [r1, #0]
 8003c7a:	b570      	push	{r4, r5, r6, lr}
 8003c7c:	b96a      	cbnz	r2, 8003c9a <strstr+0x22>
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d109      	bne.n	8003c98 <strstr+0x20>
 8003c84:	460c      	mov	r4, r1
 8003c86:	4605      	mov	r5, r0
 8003c88:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f6      	beq.n	8003c7e <strstr+0x6>
 8003c90:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003c94:	429e      	cmp	r6, r3
 8003c96:	d0f7      	beq.n	8003c88 <strstr+0x10>
 8003c98:	3001      	adds	r0, #1
 8003c9a:	7803      	ldrb	r3, [r0, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1ef      	bne.n	8003c80 <strstr+0x8>
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	e7ec      	b.n	8003c7e <strstr+0x6>

08003ca4 <__errno>:
 8003ca4:	4b01      	ldr	r3, [pc, #4]	@ (8003cac <__errno+0x8>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	20000014 	.word	0x20000014

08003cb0 <__libc_init_array>:
 8003cb0:	b570      	push	{r4, r5, r6, lr}
 8003cb2:	4d0d      	ldr	r5, [pc, #52]	@ (8003ce8 <__libc_init_array+0x38>)
 8003cb4:	4c0d      	ldr	r4, [pc, #52]	@ (8003cec <__libc_init_array+0x3c>)
 8003cb6:	1b64      	subs	r4, r4, r5
 8003cb8:	10a4      	asrs	r4, r4, #2
 8003cba:	2600      	movs	r6, #0
 8003cbc:	42a6      	cmp	r6, r4
 8003cbe:	d109      	bne.n	8003cd4 <__libc_init_array+0x24>
 8003cc0:	4d0b      	ldr	r5, [pc, #44]	@ (8003cf0 <__libc_init_array+0x40>)
 8003cc2:	4c0c      	ldr	r4, [pc, #48]	@ (8003cf4 <__libc_init_array+0x44>)
 8003cc4:	f001 f8e8 	bl	8004e98 <_init>
 8003cc8:	1b64      	subs	r4, r4, r5
 8003cca:	10a4      	asrs	r4, r4, #2
 8003ccc:	2600      	movs	r6, #0
 8003cce:	42a6      	cmp	r6, r4
 8003cd0:	d105      	bne.n	8003cde <__libc_init_array+0x2e>
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd8:	4798      	blx	r3
 8003cda:	3601      	adds	r6, #1
 8003cdc:	e7ee      	b.n	8003cbc <__libc_init_array+0xc>
 8003cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce2:	4798      	blx	r3
 8003ce4:	3601      	adds	r6, #1
 8003ce6:	e7f2      	b.n	8003cce <__libc_init_array+0x1e>
 8003ce8:	08005280 	.word	0x08005280
 8003cec:	08005280 	.word	0x08005280
 8003cf0:	08005280 	.word	0x08005280
 8003cf4:	08005284 	.word	0x08005284

08003cf8 <__retarget_lock_acquire_recursive>:
 8003cf8:	4770      	bx	lr

08003cfa <__retarget_lock_release_recursive>:
 8003cfa:	4770      	bx	lr

08003cfc <strcpy>:
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d02:	f803 2b01 	strb.w	r2, [r3], #1
 8003d06:	2a00      	cmp	r2, #0
 8003d08:	d1f9      	bne.n	8003cfe <strcpy+0x2>
 8003d0a:	4770      	bx	lr

08003d0c <memcpy>:
 8003d0c:	440a      	add	r2, r1
 8003d0e:	4291      	cmp	r1, r2
 8003d10:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d14:	d100      	bne.n	8003d18 <memcpy+0xc>
 8003d16:	4770      	bx	lr
 8003d18:	b510      	push	{r4, lr}
 8003d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d22:	4291      	cmp	r1, r2
 8003d24:	d1f9      	bne.n	8003d1a <memcpy+0xe>
 8003d26:	bd10      	pop	{r4, pc}

08003d28 <_free_r>:
 8003d28:	b538      	push	{r3, r4, r5, lr}
 8003d2a:	4605      	mov	r5, r0
 8003d2c:	2900      	cmp	r1, #0
 8003d2e:	d041      	beq.n	8003db4 <_free_r+0x8c>
 8003d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d34:	1f0c      	subs	r4, r1, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	bfb8      	it	lt
 8003d3a:	18e4      	addlt	r4, r4, r3
 8003d3c:	f000 f8e0 	bl	8003f00 <__malloc_lock>
 8003d40:	4a1d      	ldr	r2, [pc, #116]	@ (8003db8 <_free_r+0x90>)
 8003d42:	6813      	ldr	r3, [r2, #0]
 8003d44:	b933      	cbnz	r3, 8003d54 <_free_r+0x2c>
 8003d46:	6063      	str	r3, [r4, #4]
 8003d48:	6014      	str	r4, [r2, #0]
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d50:	f000 b8dc 	b.w	8003f0c <__malloc_unlock>
 8003d54:	42a3      	cmp	r3, r4
 8003d56:	d908      	bls.n	8003d6a <_free_r+0x42>
 8003d58:	6820      	ldr	r0, [r4, #0]
 8003d5a:	1821      	adds	r1, r4, r0
 8003d5c:	428b      	cmp	r3, r1
 8003d5e:	bf01      	itttt	eq
 8003d60:	6819      	ldreq	r1, [r3, #0]
 8003d62:	685b      	ldreq	r3, [r3, #4]
 8003d64:	1809      	addeq	r1, r1, r0
 8003d66:	6021      	streq	r1, [r4, #0]
 8003d68:	e7ed      	b.n	8003d46 <_free_r+0x1e>
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	b10b      	cbz	r3, 8003d74 <_free_r+0x4c>
 8003d70:	42a3      	cmp	r3, r4
 8003d72:	d9fa      	bls.n	8003d6a <_free_r+0x42>
 8003d74:	6811      	ldr	r1, [r2, #0]
 8003d76:	1850      	adds	r0, r2, r1
 8003d78:	42a0      	cmp	r0, r4
 8003d7a:	d10b      	bne.n	8003d94 <_free_r+0x6c>
 8003d7c:	6820      	ldr	r0, [r4, #0]
 8003d7e:	4401      	add	r1, r0
 8003d80:	1850      	adds	r0, r2, r1
 8003d82:	4283      	cmp	r3, r0
 8003d84:	6011      	str	r1, [r2, #0]
 8003d86:	d1e0      	bne.n	8003d4a <_free_r+0x22>
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	6053      	str	r3, [r2, #4]
 8003d8e:	4408      	add	r0, r1
 8003d90:	6010      	str	r0, [r2, #0]
 8003d92:	e7da      	b.n	8003d4a <_free_r+0x22>
 8003d94:	d902      	bls.n	8003d9c <_free_r+0x74>
 8003d96:	230c      	movs	r3, #12
 8003d98:	602b      	str	r3, [r5, #0]
 8003d9a:	e7d6      	b.n	8003d4a <_free_r+0x22>
 8003d9c:	6820      	ldr	r0, [r4, #0]
 8003d9e:	1821      	adds	r1, r4, r0
 8003da0:	428b      	cmp	r3, r1
 8003da2:	bf04      	itt	eq
 8003da4:	6819      	ldreq	r1, [r3, #0]
 8003da6:	685b      	ldreq	r3, [r3, #4]
 8003da8:	6063      	str	r3, [r4, #4]
 8003daa:	bf04      	itt	eq
 8003dac:	1809      	addeq	r1, r1, r0
 8003dae:	6021      	streq	r1, [r4, #0]
 8003db0:	6054      	str	r4, [r2, #4]
 8003db2:	e7ca      	b.n	8003d4a <_free_r+0x22>
 8003db4:	bd38      	pop	{r3, r4, r5, pc}
 8003db6:	bf00      	nop
 8003db8:	20002a50 	.word	0x20002a50

08003dbc <sbrk_aligned>:
 8003dbc:	b570      	push	{r4, r5, r6, lr}
 8003dbe:	4e0f      	ldr	r6, [pc, #60]	@ (8003dfc <sbrk_aligned+0x40>)
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	6831      	ldr	r1, [r6, #0]
 8003dc4:	4605      	mov	r5, r0
 8003dc6:	b911      	cbnz	r1, 8003dce <sbrk_aligned+0x12>
 8003dc8:	f000 ff34 	bl	8004c34 <_sbrk_r>
 8003dcc:	6030      	str	r0, [r6, #0]
 8003dce:	4621      	mov	r1, r4
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	f000 ff2f 	bl	8004c34 <_sbrk_r>
 8003dd6:	1c43      	adds	r3, r0, #1
 8003dd8:	d103      	bne.n	8003de2 <sbrk_aligned+0x26>
 8003dda:	f04f 34ff 	mov.w	r4, #4294967295
 8003dde:	4620      	mov	r0, r4
 8003de0:	bd70      	pop	{r4, r5, r6, pc}
 8003de2:	1cc4      	adds	r4, r0, #3
 8003de4:	f024 0403 	bic.w	r4, r4, #3
 8003de8:	42a0      	cmp	r0, r4
 8003dea:	d0f8      	beq.n	8003dde <sbrk_aligned+0x22>
 8003dec:	1a21      	subs	r1, r4, r0
 8003dee:	4628      	mov	r0, r5
 8003df0:	f000 ff20 	bl	8004c34 <_sbrk_r>
 8003df4:	3001      	adds	r0, #1
 8003df6:	d1f2      	bne.n	8003dde <sbrk_aligned+0x22>
 8003df8:	e7ef      	b.n	8003dda <sbrk_aligned+0x1e>
 8003dfa:	bf00      	nop
 8003dfc:	20002a4c 	.word	0x20002a4c

08003e00 <_malloc_r>:
 8003e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e04:	1ccd      	adds	r5, r1, #3
 8003e06:	f025 0503 	bic.w	r5, r5, #3
 8003e0a:	3508      	adds	r5, #8
 8003e0c:	2d0c      	cmp	r5, #12
 8003e0e:	bf38      	it	cc
 8003e10:	250c      	movcc	r5, #12
 8003e12:	2d00      	cmp	r5, #0
 8003e14:	4606      	mov	r6, r0
 8003e16:	db01      	blt.n	8003e1c <_malloc_r+0x1c>
 8003e18:	42a9      	cmp	r1, r5
 8003e1a:	d904      	bls.n	8003e26 <_malloc_r+0x26>
 8003e1c:	230c      	movs	r3, #12
 8003e1e:	6033      	str	r3, [r6, #0]
 8003e20:	2000      	movs	r0, #0
 8003e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003efc <_malloc_r+0xfc>
 8003e2a:	f000 f869 	bl	8003f00 <__malloc_lock>
 8003e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8003e32:	461c      	mov	r4, r3
 8003e34:	bb44      	cbnz	r4, 8003e88 <_malloc_r+0x88>
 8003e36:	4629      	mov	r1, r5
 8003e38:	4630      	mov	r0, r6
 8003e3a:	f7ff ffbf 	bl	8003dbc <sbrk_aligned>
 8003e3e:	1c43      	adds	r3, r0, #1
 8003e40:	4604      	mov	r4, r0
 8003e42:	d158      	bne.n	8003ef6 <_malloc_r+0xf6>
 8003e44:	f8d8 4000 	ldr.w	r4, [r8]
 8003e48:	4627      	mov	r7, r4
 8003e4a:	2f00      	cmp	r7, #0
 8003e4c:	d143      	bne.n	8003ed6 <_malloc_r+0xd6>
 8003e4e:	2c00      	cmp	r4, #0
 8003e50:	d04b      	beq.n	8003eea <_malloc_r+0xea>
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	4639      	mov	r1, r7
 8003e56:	4630      	mov	r0, r6
 8003e58:	eb04 0903 	add.w	r9, r4, r3
 8003e5c:	f000 feea 	bl	8004c34 <_sbrk_r>
 8003e60:	4581      	cmp	r9, r0
 8003e62:	d142      	bne.n	8003eea <_malloc_r+0xea>
 8003e64:	6821      	ldr	r1, [r4, #0]
 8003e66:	1a6d      	subs	r5, r5, r1
 8003e68:	4629      	mov	r1, r5
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	f7ff ffa6 	bl	8003dbc <sbrk_aligned>
 8003e70:	3001      	adds	r0, #1
 8003e72:	d03a      	beq.n	8003eea <_malloc_r+0xea>
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	442b      	add	r3, r5
 8003e78:	6023      	str	r3, [r4, #0]
 8003e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	bb62      	cbnz	r2, 8003edc <_malloc_r+0xdc>
 8003e82:	f8c8 7000 	str.w	r7, [r8]
 8003e86:	e00f      	b.n	8003ea8 <_malloc_r+0xa8>
 8003e88:	6822      	ldr	r2, [r4, #0]
 8003e8a:	1b52      	subs	r2, r2, r5
 8003e8c:	d420      	bmi.n	8003ed0 <_malloc_r+0xd0>
 8003e8e:	2a0b      	cmp	r2, #11
 8003e90:	d917      	bls.n	8003ec2 <_malloc_r+0xc2>
 8003e92:	1961      	adds	r1, r4, r5
 8003e94:	42a3      	cmp	r3, r4
 8003e96:	6025      	str	r5, [r4, #0]
 8003e98:	bf18      	it	ne
 8003e9a:	6059      	strne	r1, [r3, #4]
 8003e9c:	6863      	ldr	r3, [r4, #4]
 8003e9e:	bf08      	it	eq
 8003ea0:	f8c8 1000 	streq.w	r1, [r8]
 8003ea4:	5162      	str	r2, [r4, r5]
 8003ea6:	604b      	str	r3, [r1, #4]
 8003ea8:	4630      	mov	r0, r6
 8003eaa:	f000 f82f 	bl	8003f0c <__malloc_unlock>
 8003eae:	f104 000b 	add.w	r0, r4, #11
 8003eb2:	1d23      	adds	r3, r4, #4
 8003eb4:	f020 0007 	bic.w	r0, r0, #7
 8003eb8:	1ac2      	subs	r2, r0, r3
 8003eba:	bf1c      	itt	ne
 8003ebc:	1a1b      	subne	r3, r3, r0
 8003ebe:	50a3      	strne	r3, [r4, r2]
 8003ec0:	e7af      	b.n	8003e22 <_malloc_r+0x22>
 8003ec2:	6862      	ldr	r2, [r4, #4]
 8003ec4:	42a3      	cmp	r3, r4
 8003ec6:	bf0c      	ite	eq
 8003ec8:	f8c8 2000 	streq.w	r2, [r8]
 8003ecc:	605a      	strne	r2, [r3, #4]
 8003ece:	e7eb      	b.n	8003ea8 <_malloc_r+0xa8>
 8003ed0:	4623      	mov	r3, r4
 8003ed2:	6864      	ldr	r4, [r4, #4]
 8003ed4:	e7ae      	b.n	8003e34 <_malloc_r+0x34>
 8003ed6:	463c      	mov	r4, r7
 8003ed8:	687f      	ldr	r7, [r7, #4]
 8003eda:	e7b6      	b.n	8003e4a <_malloc_r+0x4a>
 8003edc:	461a      	mov	r2, r3
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	42a3      	cmp	r3, r4
 8003ee2:	d1fb      	bne.n	8003edc <_malloc_r+0xdc>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	6053      	str	r3, [r2, #4]
 8003ee8:	e7de      	b.n	8003ea8 <_malloc_r+0xa8>
 8003eea:	230c      	movs	r3, #12
 8003eec:	6033      	str	r3, [r6, #0]
 8003eee:	4630      	mov	r0, r6
 8003ef0:	f000 f80c 	bl	8003f0c <__malloc_unlock>
 8003ef4:	e794      	b.n	8003e20 <_malloc_r+0x20>
 8003ef6:	6005      	str	r5, [r0, #0]
 8003ef8:	e7d6      	b.n	8003ea8 <_malloc_r+0xa8>
 8003efa:	bf00      	nop
 8003efc:	20002a50 	.word	0x20002a50

08003f00 <__malloc_lock>:
 8003f00:	4801      	ldr	r0, [pc, #4]	@ (8003f08 <__malloc_lock+0x8>)
 8003f02:	f7ff bef9 	b.w	8003cf8 <__retarget_lock_acquire_recursive>
 8003f06:	bf00      	nop
 8003f08:	20002a48 	.word	0x20002a48

08003f0c <__malloc_unlock>:
 8003f0c:	4801      	ldr	r0, [pc, #4]	@ (8003f14 <__malloc_unlock+0x8>)
 8003f0e:	f7ff bef4 	b.w	8003cfa <__retarget_lock_release_recursive>
 8003f12:	bf00      	nop
 8003f14:	20002a48 	.word	0x20002a48

08003f18 <__ssputs_r>:
 8003f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f1c:	688e      	ldr	r6, [r1, #8]
 8003f1e:	461f      	mov	r7, r3
 8003f20:	42be      	cmp	r6, r7
 8003f22:	680b      	ldr	r3, [r1, #0]
 8003f24:	4682      	mov	sl, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	4690      	mov	r8, r2
 8003f2a:	d82d      	bhi.n	8003f88 <__ssputs_r+0x70>
 8003f2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f34:	d026      	beq.n	8003f84 <__ssputs_r+0x6c>
 8003f36:	6965      	ldr	r5, [r4, #20]
 8003f38:	6909      	ldr	r1, [r1, #16]
 8003f3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f3e:	eba3 0901 	sub.w	r9, r3, r1
 8003f42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f46:	1c7b      	adds	r3, r7, #1
 8003f48:	444b      	add	r3, r9
 8003f4a:	106d      	asrs	r5, r5, #1
 8003f4c:	429d      	cmp	r5, r3
 8003f4e:	bf38      	it	cc
 8003f50:	461d      	movcc	r5, r3
 8003f52:	0553      	lsls	r3, r2, #21
 8003f54:	d527      	bpl.n	8003fa6 <__ssputs_r+0x8e>
 8003f56:	4629      	mov	r1, r5
 8003f58:	f7ff ff52 	bl	8003e00 <_malloc_r>
 8003f5c:	4606      	mov	r6, r0
 8003f5e:	b360      	cbz	r0, 8003fba <__ssputs_r+0xa2>
 8003f60:	6921      	ldr	r1, [r4, #16]
 8003f62:	464a      	mov	r2, r9
 8003f64:	f7ff fed2 	bl	8003d0c <memcpy>
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f72:	81a3      	strh	r3, [r4, #12]
 8003f74:	6126      	str	r6, [r4, #16]
 8003f76:	6165      	str	r5, [r4, #20]
 8003f78:	444e      	add	r6, r9
 8003f7a:	eba5 0509 	sub.w	r5, r5, r9
 8003f7e:	6026      	str	r6, [r4, #0]
 8003f80:	60a5      	str	r5, [r4, #8]
 8003f82:	463e      	mov	r6, r7
 8003f84:	42be      	cmp	r6, r7
 8003f86:	d900      	bls.n	8003f8a <__ssputs_r+0x72>
 8003f88:	463e      	mov	r6, r7
 8003f8a:	6820      	ldr	r0, [r4, #0]
 8003f8c:	4632      	mov	r2, r6
 8003f8e:	4641      	mov	r1, r8
 8003f90:	f000 fe35 	bl	8004bfe <memmove>
 8003f94:	68a3      	ldr	r3, [r4, #8]
 8003f96:	1b9b      	subs	r3, r3, r6
 8003f98:	60a3      	str	r3, [r4, #8]
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	4433      	add	r3, r6
 8003f9e:	6023      	str	r3, [r4, #0]
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa6:	462a      	mov	r2, r5
 8003fa8:	f000 fe54 	bl	8004c54 <_realloc_r>
 8003fac:	4606      	mov	r6, r0
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	d1e0      	bne.n	8003f74 <__ssputs_r+0x5c>
 8003fb2:	6921      	ldr	r1, [r4, #16]
 8003fb4:	4650      	mov	r0, sl
 8003fb6:	f7ff feb7 	bl	8003d28 <_free_r>
 8003fba:	230c      	movs	r3, #12
 8003fbc:	f8ca 3000 	str.w	r3, [sl]
 8003fc0:	89a3      	ldrh	r3, [r4, #12]
 8003fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fc6:	81a3      	strh	r3, [r4, #12]
 8003fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fcc:	e7e9      	b.n	8003fa2 <__ssputs_r+0x8a>
	...

08003fd0 <_svfiprintf_r>:
 8003fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd4:	4698      	mov	r8, r3
 8003fd6:	898b      	ldrh	r3, [r1, #12]
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	b09d      	sub	sp, #116	@ 0x74
 8003fdc:	4607      	mov	r7, r0
 8003fde:	460d      	mov	r5, r1
 8003fe0:	4614      	mov	r4, r2
 8003fe2:	d510      	bpl.n	8004006 <_svfiprintf_r+0x36>
 8003fe4:	690b      	ldr	r3, [r1, #16]
 8003fe6:	b973      	cbnz	r3, 8004006 <_svfiprintf_r+0x36>
 8003fe8:	2140      	movs	r1, #64	@ 0x40
 8003fea:	f7ff ff09 	bl	8003e00 <_malloc_r>
 8003fee:	6028      	str	r0, [r5, #0]
 8003ff0:	6128      	str	r0, [r5, #16]
 8003ff2:	b930      	cbnz	r0, 8004002 <_svfiprintf_r+0x32>
 8003ff4:	230c      	movs	r3, #12
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffc:	b01d      	add	sp, #116	@ 0x74
 8003ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004002:	2340      	movs	r3, #64	@ 0x40
 8004004:	616b      	str	r3, [r5, #20]
 8004006:	2300      	movs	r3, #0
 8004008:	9309      	str	r3, [sp, #36]	@ 0x24
 800400a:	2320      	movs	r3, #32
 800400c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004010:	f8cd 800c 	str.w	r8, [sp, #12]
 8004014:	2330      	movs	r3, #48	@ 0x30
 8004016:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041b4 <_svfiprintf_r+0x1e4>
 800401a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800401e:	f04f 0901 	mov.w	r9, #1
 8004022:	4623      	mov	r3, r4
 8004024:	469a      	mov	sl, r3
 8004026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800402a:	b10a      	cbz	r2, 8004030 <_svfiprintf_r+0x60>
 800402c:	2a25      	cmp	r2, #37	@ 0x25
 800402e:	d1f9      	bne.n	8004024 <_svfiprintf_r+0x54>
 8004030:	ebba 0b04 	subs.w	fp, sl, r4
 8004034:	d00b      	beq.n	800404e <_svfiprintf_r+0x7e>
 8004036:	465b      	mov	r3, fp
 8004038:	4622      	mov	r2, r4
 800403a:	4629      	mov	r1, r5
 800403c:	4638      	mov	r0, r7
 800403e:	f7ff ff6b 	bl	8003f18 <__ssputs_r>
 8004042:	3001      	adds	r0, #1
 8004044:	f000 80a7 	beq.w	8004196 <_svfiprintf_r+0x1c6>
 8004048:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800404a:	445a      	add	r2, fp
 800404c:	9209      	str	r2, [sp, #36]	@ 0x24
 800404e:	f89a 3000 	ldrb.w	r3, [sl]
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 809f 	beq.w	8004196 <_svfiprintf_r+0x1c6>
 8004058:	2300      	movs	r3, #0
 800405a:	f04f 32ff 	mov.w	r2, #4294967295
 800405e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004062:	f10a 0a01 	add.w	sl, sl, #1
 8004066:	9304      	str	r3, [sp, #16]
 8004068:	9307      	str	r3, [sp, #28]
 800406a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800406e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004070:	4654      	mov	r4, sl
 8004072:	2205      	movs	r2, #5
 8004074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004078:	484e      	ldr	r0, [pc, #312]	@ (80041b4 <_svfiprintf_r+0x1e4>)
 800407a:	f7fc f8b1 	bl	80001e0 <memchr>
 800407e:	9a04      	ldr	r2, [sp, #16]
 8004080:	b9d8      	cbnz	r0, 80040ba <_svfiprintf_r+0xea>
 8004082:	06d0      	lsls	r0, r2, #27
 8004084:	bf44      	itt	mi
 8004086:	2320      	movmi	r3, #32
 8004088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800408c:	0711      	lsls	r1, r2, #28
 800408e:	bf44      	itt	mi
 8004090:	232b      	movmi	r3, #43	@ 0x2b
 8004092:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004096:	f89a 3000 	ldrb.w	r3, [sl]
 800409a:	2b2a      	cmp	r3, #42	@ 0x2a
 800409c:	d015      	beq.n	80040ca <_svfiprintf_r+0xfa>
 800409e:	9a07      	ldr	r2, [sp, #28]
 80040a0:	4654      	mov	r4, sl
 80040a2:	2000      	movs	r0, #0
 80040a4:	f04f 0c0a 	mov.w	ip, #10
 80040a8:	4621      	mov	r1, r4
 80040aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040ae:	3b30      	subs	r3, #48	@ 0x30
 80040b0:	2b09      	cmp	r3, #9
 80040b2:	d94b      	bls.n	800414c <_svfiprintf_r+0x17c>
 80040b4:	b1b0      	cbz	r0, 80040e4 <_svfiprintf_r+0x114>
 80040b6:	9207      	str	r2, [sp, #28]
 80040b8:	e014      	b.n	80040e4 <_svfiprintf_r+0x114>
 80040ba:	eba0 0308 	sub.w	r3, r0, r8
 80040be:	fa09 f303 	lsl.w	r3, r9, r3
 80040c2:	4313      	orrs	r3, r2
 80040c4:	9304      	str	r3, [sp, #16]
 80040c6:	46a2      	mov	sl, r4
 80040c8:	e7d2      	b.n	8004070 <_svfiprintf_r+0xa0>
 80040ca:	9b03      	ldr	r3, [sp, #12]
 80040cc:	1d19      	adds	r1, r3, #4
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	9103      	str	r1, [sp, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	bfbb      	ittet	lt
 80040d6:	425b      	neglt	r3, r3
 80040d8:	f042 0202 	orrlt.w	r2, r2, #2
 80040dc:	9307      	strge	r3, [sp, #28]
 80040de:	9307      	strlt	r3, [sp, #28]
 80040e0:	bfb8      	it	lt
 80040e2:	9204      	strlt	r2, [sp, #16]
 80040e4:	7823      	ldrb	r3, [r4, #0]
 80040e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80040e8:	d10a      	bne.n	8004100 <_svfiprintf_r+0x130>
 80040ea:	7863      	ldrb	r3, [r4, #1]
 80040ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80040ee:	d132      	bne.n	8004156 <_svfiprintf_r+0x186>
 80040f0:	9b03      	ldr	r3, [sp, #12]
 80040f2:	1d1a      	adds	r2, r3, #4
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	9203      	str	r2, [sp, #12]
 80040f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040fc:	3402      	adds	r4, #2
 80040fe:	9305      	str	r3, [sp, #20]
 8004100:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80041c4 <_svfiprintf_r+0x1f4>
 8004104:	7821      	ldrb	r1, [r4, #0]
 8004106:	2203      	movs	r2, #3
 8004108:	4650      	mov	r0, sl
 800410a:	f7fc f869 	bl	80001e0 <memchr>
 800410e:	b138      	cbz	r0, 8004120 <_svfiprintf_r+0x150>
 8004110:	9b04      	ldr	r3, [sp, #16]
 8004112:	eba0 000a 	sub.w	r0, r0, sl
 8004116:	2240      	movs	r2, #64	@ 0x40
 8004118:	4082      	lsls	r2, r0
 800411a:	4313      	orrs	r3, r2
 800411c:	3401      	adds	r4, #1
 800411e:	9304      	str	r3, [sp, #16]
 8004120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004124:	4824      	ldr	r0, [pc, #144]	@ (80041b8 <_svfiprintf_r+0x1e8>)
 8004126:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800412a:	2206      	movs	r2, #6
 800412c:	f7fc f858 	bl	80001e0 <memchr>
 8004130:	2800      	cmp	r0, #0
 8004132:	d036      	beq.n	80041a2 <_svfiprintf_r+0x1d2>
 8004134:	4b21      	ldr	r3, [pc, #132]	@ (80041bc <_svfiprintf_r+0x1ec>)
 8004136:	bb1b      	cbnz	r3, 8004180 <_svfiprintf_r+0x1b0>
 8004138:	9b03      	ldr	r3, [sp, #12]
 800413a:	3307      	adds	r3, #7
 800413c:	f023 0307 	bic.w	r3, r3, #7
 8004140:	3308      	adds	r3, #8
 8004142:	9303      	str	r3, [sp, #12]
 8004144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004146:	4433      	add	r3, r6
 8004148:	9309      	str	r3, [sp, #36]	@ 0x24
 800414a:	e76a      	b.n	8004022 <_svfiprintf_r+0x52>
 800414c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004150:	460c      	mov	r4, r1
 8004152:	2001      	movs	r0, #1
 8004154:	e7a8      	b.n	80040a8 <_svfiprintf_r+0xd8>
 8004156:	2300      	movs	r3, #0
 8004158:	3401      	adds	r4, #1
 800415a:	9305      	str	r3, [sp, #20]
 800415c:	4619      	mov	r1, r3
 800415e:	f04f 0c0a 	mov.w	ip, #10
 8004162:	4620      	mov	r0, r4
 8004164:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004168:	3a30      	subs	r2, #48	@ 0x30
 800416a:	2a09      	cmp	r2, #9
 800416c:	d903      	bls.n	8004176 <_svfiprintf_r+0x1a6>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0c6      	beq.n	8004100 <_svfiprintf_r+0x130>
 8004172:	9105      	str	r1, [sp, #20]
 8004174:	e7c4      	b.n	8004100 <_svfiprintf_r+0x130>
 8004176:	fb0c 2101 	mla	r1, ip, r1, r2
 800417a:	4604      	mov	r4, r0
 800417c:	2301      	movs	r3, #1
 800417e:	e7f0      	b.n	8004162 <_svfiprintf_r+0x192>
 8004180:	ab03      	add	r3, sp, #12
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	462a      	mov	r2, r5
 8004186:	4b0e      	ldr	r3, [pc, #56]	@ (80041c0 <_svfiprintf_r+0x1f0>)
 8004188:	a904      	add	r1, sp, #16
 800418a:	4638      	mov	r0, r7
 800418c:	f3af 8000 	nop.w
 8004190:	1c42      	adds	r2, r0, #1
 8004192:	4606      	mov	r6, r0
 8004194:	d1d6      	bne.n	8004144 <_svfiprintf_r+0x174>
 8004196:	89ab      	ldrh	r3, [r5, #12]
 8004198:	065b      	lsls	r3, r3, #25
 800419a:	f53f af2d 	bmi.w	8003ff8 <_svfiprintf_r+0x28>
 800419e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041a0:	e72c      	b.n	8003ffc <_svfiprintf_r+0x2c>
 80041a2:	ab03      	add	r3, sp, #12
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	462a      	mov	r2, r5
 80041a8:	4b05      	ldr	r3, [pc, #20]	@ (80041c0 <_svfiprintf_r+0x1f0>)
 80041aa:	a904      	add	r1, sp, #16
 80041ac:	4638      	mov	r0, r7
 80041ae:	f000 fa45 	bl	800463c <_printf_i>
 80041b2:	e7ed      	b.n	8004190 <_svfiprintf_r+0x1c0>
 80041b4:	08005128 	.word	0x08005128
 80041b8:	08005132 	.word	0x08005132
 80041bc:	00000000 	.word	0x00000000
 80041c0:	08003f19 	.word	0x08003f19
 80041c4:	0800512e 	.word	0x0800512e

080041c8 <_sungetc_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	1c4b      	adds	r3, r1, #1
 80041cc:	4614      	mov	r4, r2
 80041ce:	d103      	bne.n	80041d8 <_sungetc_r+0x10>
 80041d0:	f04f 35ff 	mov.w	r5, #4294967295
 80041d4:	4628      	mov	r0, r5
 80041d6:	bd38      	pop	{r3, r4, r5, pc}
 80041d8:	8993      	ldrh	r3, [r2, #12]
 80041da:	f023 0320 	bic.w	r3, r3, #32
 80041de:	8193      	strh	r3, [r2, #12]
 80041e0:	6853      	ldr	r3, [r2, #4]
 80041e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80041e4:	b2cd      	uxtb	r5, r1
 80041e6:	b18a      	cbz	r2, 800420c <_sungetc_r+0x44>
 80041e8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80041ea:	429a      	cmp	r2, r3
 80041ec:	dd08      	ble.n	8004200 <_sungetc_r+0x38>
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	1e5a      	subs	r2, r3, #1
 80041f2:	6022      	str	r2, [r4, #0]
 80041f4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80041f8:	6863      	ldr	r3, [r4, #4]
 80041fa:	3301      	adds	r3, #1
 80041fc:	6063      	str	r3, [r4, #4]
 80041fe:	e7e9      	b.n	80041d4 <_sungetc_r+0xc>
 8004200:	4621      	mov	r1, r4
 8004202:	f000 fcc2 	bl	8004b8a <__submore>
 8004206:	2800      	cmp	r0, #0
 8004208:	d0f1      	beq.n	80041ee <_sungetc_r+0x26>
 800420a:	e7e1      	b.n	80041d0 <_sungetc_r+0x8>
 800420c:	6921      	ldr	r1, [r4, #16]
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	b141      	cbz	r1, 8004224 <_sungetc_r+0x5c>
 8004212:	4291      	cmp	r1, r2
 8004214:	d206      	bcs.n	8004224 <_sungetc_r+0x5c>
 8004216:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800421a:	42a9      	cmp	r1, r5
 800421c:	d102      	bne.n	8004224 <_sungetc_r+0x5c>
 800421e:	3a01      	subs	r2, #1
 8004220:	6022      	str	r2, [r4, #0]
 8004222:	e7ea      	b.n	80041fa <_sungetc_r+0x32>
 8004224:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8004228:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800422c:	6363      	str	r3, [r4, #52]	@ 0x34
 800422e:	2303      	movs	r3, #3
 8004230:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004232:	4623      	mov	r3, r4
 8004234:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	2301      	movs	r3, #1
 800423c:	e7de      	b.n	80041fc <_sungetc_r+0x34>

0800423e <__ssrefill_r>:
 800423e:	b510      	push	{r4, lr}
 8004240:	460c      	mov	r4, r1
 8004242:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004244:	b169      	cbz	r1, 8004262 <__ssrefill_r+0x24>
 8004246:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800424a:	4299      	cmp	r1, r3
 800424c:	d001      	beq.n	8004252 <__ssrefill_r+0x14>
 800424e:	f7ff fd6b 	bl	8003d28 <_free_r>
 8004252:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004254:	6063      	str	r3, [r4, #4]
 8004256:	2000      	movs	r0, #0
 8004258:	6360      	str	r0, [r4, #52]	@ 0x34
 800425a:	b113      	cbz	r3, 8004262 <__ssrefill_r+0x24>
 800425c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800425e:	6023      	str	r3, [r4, #0]
 8004260:	bd10      	pop	{r4, pc}
 8004262:	6923      	ldr	r3, [r4, #16]
 8004264:	6023      	str	r3, [r4, #0]
 8004266:	2300      	movs	r3, #0
 8004268:	6063      	str	r3, [r4, #4]
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	f043 0320 	orr.w	r3, r3, #32
 8004270:	81a3      	strh	r3, [r4, #12]
 8004272:	f04f 30ff 	mov.w	r0, #4294967295
 8004276:	e7f3      	b.n	8004260 <__ssrefill_r+0x22>

08004278 <__ssvfiscanf_r>:
 8004278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800427c:	460c      	mov	r4, r1
 800427e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8004282:	2100      	movs	r1, #0
 8004284:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004288:	49a5      	ldr	r1, [pc, #660]	@ (8004520 <__ssvfiscanf_r+0x2a8>)
 800428a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800428c:	f10d 0804 	add.w	r8, sp, #4
 8004290:	49a4      	ldr	r1, [pc, #656]	@ (8004524 <__ssvfiscanf_r+0x2ac>)
 8004292:	4fa5      	ldr	r7, [pc, #660]	@ (8004528 <__ssvfiscanf_r+0x2b0>)
 8004294:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004298:	4606      	mov	r6, r0
 800429a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	7813      	ldrb	r3, [r2, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8158 	beq.w	8004556 <__ssvfiscanf_r+0x2de>
 80042a6:	5cf9      	ldrb	r1, [r7, r3]
 80042a8:	f011 0108 	ands.w	r1, r1, #8
 80042ac:	f102 0501 	add.w	r5, r2, #1
 80042b0:	d019      	beq.n	80042e6 <__ssvfiscanf_r+0x6e>
 80042b2:	6863      	ldr	r3, [r4, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	dd0f      	ble.n	80042d8 <__ssvfiscanf_r+0x60>
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	781a      	ldrb	r2, [r3, #0]
 80042bc:	5cba      	ldrb	r2, [r7, r2]
 80042be:	0712      	lsls	r2, r2, #28
 80042c0:	d401      	bmi.n	80042c6 <__ssvfiscanf_r+0x4e>
 80042c2:	462a      	mov	r2, r5
 80042c4:	e7eb      	b.n	800429e <__ssvfiscanf_r+0x26>
 80042c6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80042c8:	3201      	adds	r2, #1
 80042ca:	9245      	str	r2, [sp, #276]	@ 0x114
 80042cc:	6862      	ldr	r2, [r4, #4]
 80042ce:	3301      	adds	r3, #1
 80042d0:	3a01      	subs	r2, #1
 80042d2:	6062      	str	r2, [r4, #4]
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	e7ec      	b.n	80042b2 <__ssvfiscanf_r+0x3a>
 80042d8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80042da:	4621      	mov	r1, r4
 80042dc:	4630      	mov	r0, r6
 80042de:	4798      	blx	r3
 80042e0:	2800      	cmp	r0, #0
 80042e2:	d0e9      	beq.n	80042b8 <__ssvfiscanf_r+0x40>
 80042e4:	e7ed      	b.n	80042c2 <__ssvfiscanf_r+0x4a>
 80042e6:	2b25      	cmp	r3, #37	@ 0x25
 80042e8:	d012      	beq.n	8004310 <__ssvfiscanf_r+0x98>
 80042ea:	4699      	mov	r9, r3
 80042ec:	6863      	ldr	r3, [r4, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f340 8093 	ble.w	800441a <__ssvfiscanf_r+0x1a2>
 80042f4:	6822      	ldr	r2, [r4, #0]
 80042f6:	7813      	ldrb	r3, [r2, #0]
 80042f8:	454b      	cmp	r3, r9
 80042fa:	f040 812c 	bne.w	8004556 <__ssvfiscanf_r+0x2de>
 80042fe:	6863      	ldr	r3, [r4, #4]
 8004300:	3b01      	subs	r3, #1
 8004302:	6063      	str	r3, [r4, #4]
 8004304:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004306:	3201      	adds	r2, #1
 8004308:	3301      	adds	r3, #1
 800430a:	6022      	str	r2, [r4, #0]
 800430c:	9345      	str	r3, [sp, #276]	@ 0x114
 800430e:	e7d8      	b.n	80042c2 <__ssvfiscanf_r+0x4a>
 8004310:	9141      	str	r1, [sp, #260]	@ 0x104
 8004312:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004314:	7853      	ldrb	r3, [r2, #1]
 8004316:	2b2a      	cmp	r3, #42	@ 0x2a
 8004318:	bf02      	ittt	eq
 800431a:	2310      	moveq	r3, #16
 800431c:	1c95      	addeq	r5, r2, #2
 800431e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004320:	220a      	movs	r2, #10
 8004322:	46a9      	mov	r9, r5
 8004324:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004328:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800432c:	2b09      	cmp	r3, #9
 800432e:	d91e      	bls.n	800436e <__ssvfiscanf_r+0xf6>
 8004330:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800452c <__ssvfiscanf_r+0x2b4>
 8004334:	2203      	movs	r2, #3
 8004336:	4650      	mov	r0, sl
 8004338:	f7fb ff52 	bl	80001e0 <memchr>
 800433c:	b138      	cbz	r0, 800434e <__ssvfiscanf_r+0xd6>
 800433e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004340:	eba0 000a 	sub.w	r0, r0, sl
 8004344:	2301      	movs	r3, #1
 8004346:	4083      	lsls	r3, r0
 8004348:	4313      	orrs	r3, r2
 800434a:	9341      	str	r3, [sp, #260]	@ 0x104
 800434c:	464d      	mov	r5, r9
 800434e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004352:	2b78      	cmp	r3, #120	@ 0x78
 8004354:	d806      	bhi.n	8004364 <__ssvfiscanf_r+0xec>
 8004356:	2b57      	cmp	r3, #87	@ 0x57
 8004358:	d810      	bhi.n	800437c <__ssvfiscanf_r+0x104>
 800435a:	2b25      	cmp	r3, #37	@ 0x25
 800435c:	d0c5      	beq.n	80042ea <__ssvfiscanf_r+0x72>
 800435e:	d857      	bhi.n	8004410 <__ssvfiscanf_r+0x198>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d065      	beq.n	8004430 <__ssvfiscanf_r+0x1b8>
 8004364:	2303      	movs	r3, #3
 8004366:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004368:	230a      	movs	r3, #10
 800436a:	9342      	str	r3, [sp, #264]	@ 0x108
 800436c:	e078      	b.n	8004460 <__ssvfiscanf_r+0x1e8>
 800436e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004370:	fb02 1103 	mla	r1, r2, r3, r1
 8004374:	3930      	subs	r1, #48	@ 0x30
 8004376:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004378:	464d      	mov	r5, r9
 800437a:	e7d2      	b.n	8004322 <__ssvfiscanf_r+0xaa>
 800437c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004380:	2a20      	cmp	r2, #32
 8004382:	d8ef      	bhi.n	8004364 <__ssvfiscanf_r+0xec>
 8004384:	a101      	add	r1, pc, #4	@ (adr r1, 800438c <__ssvfiscanf_r+0x114>)
 8004386:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800438a:	bf00      	nop
 800438c:	0800443f 	.word	0x0800443f
 8004390:	08004365 	.word	0x08004365
 8004394:	08004365 	.word	0x08004365
 8004398:	08004499 	.word	0x08004499
 800439c:	08004365 	.word	0x08004365
 80043a0:	08004365 	.word	0x08004365
 80043a4:	08004365 	.word	0x08004365
 80043a8:	08004365 	.word	0x08004365
 80043ac:	08004365 	.word	0x08004365
 80043b0:	08004365 	.word	0x08004365
 80043b4:	08004365 	.word	0x08004365
 80043b8:	080044af 	.word	0x080044af
 80043bc:	08004495 	.word	0x08004495
 80043c0:	08004417 	.word	0x08004417
 80043c4:	08004417 	.word	0x08004417
 80043c8:	08004417 	.word	0x08004417
 80043cc:	08004365 	.word	0x08004365
 80043d0:	08004451 	.word	0x08004451
 80043d4:	08004365 	.word	0x08004365
 80043d8:	08004365 	.word	0x08004365
 80043dc:	08004365 	.word	0x08004365
 80043e0:	08004365 	.word	0x08004365
 80043e4:	080044bf 	.word	0x080044bf
 80043e8:	08004459 	.word	0x08004459
 80043ec:	08004437 	.word	0x08004437
 80043f0:	08004365 	.word	0x08004365
 80043f4:	08004365 	.word	0x08004365
 80043f8:	080044bb 	.word	0x080044bb
 80043fc:	08004365 	.word	0x08004365
 8004400:	08004495 	.word	0x08004495
 8004404:	08004365 	.word	0x08004365
 8004408:	08004365 	.word	0x08004365
 800440c:	0800443f 	.word	0x0800443f
 8004410:	3b45      	subs	r3, #69	@ 0x45
 8004412:	2b02      	cmp	r3, #2
 8004414:	d8a6      	bhi.n	8004364 <__ssvfiscanf_r+0xec>
 8004416:	2305      	movs	r3, #5
 8004418:	e021      	b.n	800445e <__ssvfiscanf_r+0x1e6>
 800441a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800441c:	4621      	mov	r1, r4
 800441e:	4630      	mov	r0, r6
 8004420:	4798      	blx	r3
 8004422:	2800      	cmp	r0, #0
 8004424:	f43f af66 	beq.w	80042f4 <__ssvfiscanf_r+0x7c>
 8004428:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800442a:	2800      	cmp	r0, #0
 800442c:	f040 808b 	bne.w	8004546 <__ssvfiscanf_r+0x2ce>
 8004430:	f04f 30ff 	mov.w	r0, #4294967295
 8004434:	e08b      	b.n	800454e <__ssvfiscanf_r+0x2d6>
 8004436:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004438:	f042 0220 	orr.w	r2, r2, #32
 800443c:	9241      	str	r2, [sp, #260]	@ 0x104
 800443e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004440:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004444:	9241      	str	r2, [sp, #260]	@ 0x104
 8004446:	2210      	movs	r2, #16
 8004448:	2b6e      	cmp	r3, #110	@ 0x6e
 800444a:	9242      	str	r2, [sp, #264]	@ 0x108
 800444c:	d902      	bls.n	8004454 <__ssvfiscanf_r+0x1dc>
 800444e:	e005      	b.n	800445c <__ssvfiscanf_r+0x1e4>
 8004450:	2300      	movs	r3, #0
 8004452:	9342      	str	r3, [sp, #264]	@ 0x108
 8004454:	2303      	movs	r3, #3
 8004456:	e002      	b.n	800445e <__ssvfiscanf_r+0x1e6>
 8004458:	2308      	movs	r3, #8
 800445a:	9342      	str	r3, [sp, #264]	@ 0x108
 800445c:	2304      	movs	r3, #4
 800445e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004460:	6863      	ldr	r3, [r4, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	dd39      	ble.n	80044da <__ssvfiscanf_r+0x262>
 8004466:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004468:	0659      	lsls	r1, r3, #25
 800446a:	d404      	bmi.n	8004476 <__ssvfiscanf_r+0x1fe>
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	781a      	ldrb	r2, [r3, #0]
 8004470:	5cba      	ldrb	r2, [r7, r2]
 8004472:	0712      	lsls	r2, r2, #28
 8004474:	d438      	bmi.n	80044e8 <__ssvfiscanf_r+0x270>
 8004476:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004478:	2b02      	cmp	r3, #2
 800447a:	dc47      	bgt.n	800450c <__ssvfiscanf_r+0x294>
 800447c:	466b      	mov	r3, sp
 800447e:	4622      	mov	r2, r4
 8004480:	a941      	add	r1, sp, #260	@ 0x104
 8004482:	4630      	mov	r0, r6
 8004484:	f000 f9fa 	bl	800487c <_scanf_chars>
 8004488:	2801      	cmp	r0, #1
 800448a:	d064      	beq.n	8004556 <__ssvfiscanf_r+0x2de>
 800448c:	2802      	cmp	r0, #2
 800448e:	f47f af18 	bne.w	80042c2 <__ssvfiscanf_r+0x4a>
 8004492:	e7c9      	b.n	8004428 <__ssvfiscanf_r+0x1b0>
 8004494:	220a      	movs	r2, #10
 8004496:	e7d7      	b.n	8004448 <__ssvfiscanf_r+0x1d0>
 8004498:	4629      	mov	r1, r5
 800449a:	4640      	mov	r0, r8
 800449c:	f000 fb3c 	bl	8004b18 <__sccl>
 80044a0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80044a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044a6:	9341      	str	r3, [sp, #260]	@ 0x104
 80044a8:	4605      	mov	r5, r0
 80044aa:	2301      	movs	r3, #1
 80044ac:	e7d7      	b.n	800445e <__ssvfiscanf_r+0x1e6>
 80044ae:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80044b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044b4:	9341      	str	r3, [sp, #260]	@ 0x104
 80044b6:	2300      	movs	r3, #0
 80044b8:	e7d1      	b.n	800445e <__ssvfiscanf_r+0x1e6>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e7cf      	b.n	800445e <__ssvfiscanf_r+0x1e6>
 80044be:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80044c0:	06c3      	lsls	r3, r0, #27
 80044c2:	f53f aefe 	bmi.w	80042c2 <__ssvfiscanf_r+0x4a>
 80044c6:	9b00      	ldr	r3, [sp, #0]
 80044c8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80044ca:	1d19      	adds	r1, r3, #4
 80044cc:	9100      	str	r1, [sp, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	07c0      	lsls	r0, r0, #31
 80044d2:	bf4c      	ite	mi
 80044d4:	801a      	strhmi	r2, [r3, #0]
 80044d6:	601a      	strpl	r2, [r3, #0]
 80044d8:	e6f3      	b.n	80042c2 <__ssvfiscanf_r+0x4a>
 80044da:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80044dc:	4621      	mov	r1, r4
 80044de:	4630      	mov	r0, r6
 80044e0:	4798      	blx	r3
 80044e2:	2800      	cmp	r0, #0
 80044e4:	d0bf      	beq.n	8004466 <__ssvfiscanf_r+0x1ee>
 80044e6:	e79f      	b.n	8004428 <__ssvfiscanf_r+0x1b0>
 80044e8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80044ea:	3201      	adds	r2, #1
 80044ec:	9245      	str	r2, [sp, #276]	@ 0x114
 80044ee:	6862      	ldr	r2, [r4, #4]
 80044f0:	3a01      	subs	r2, #1
 80044f2:	2a00      	cmp	r2, #0
 80044f4:	6062      	str	r2, [r4, #4]
 80044f6:	dd02      	ble.n	80044fe <__ssvfiscanf_r+0x286>
 80044f8:	3301      	adds	r3, #1
 80044fa:	6023      	str	r3, [r4, #0]
 80044fc:	e7b6      	b.n	800446c <__ssvfiscanf_r+0x1f4>
 80044fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004500:	4621      	mov	r1, r4
 8004502:	4630      	mov	r0, r6
 8004504:	4798      	blx	r3
 8004506:	2800      	cmp	r0, #0
 8004508:	d0b0      	beq.n	800446c <__ssvfiscanf_r+0x1f4>
 800450a:	e78d      	b.n	8004428 <__ssvfiscanf_r+0x1b0>
 800450c:	2b04      	cmp	r3, #4
 800450e:	dc0f      	bgt.n	8004530 <__ssvfiscanf_r+0x2b8>
 8004510:	466b      	mov	r3, sp
 8004512:	4622      	mov	r2, r4
 8004514:	a941      	add	r1, sp, #260	@ 0x104
 8004516:	4630      	mov	r0, r6
 8004518:	f000 fa0a 	bl	8004930 <_scanf_i>
 800451c:	e7b4      	b.n	8004488 <__ssvfiscanf_r+0x210>
 800451e:	bf00      	nop
 8004520:	080041c9 	.word	0x080041c9
 8004524:	0800423f 	.word	0x0800423f
 8004528:	08005177 	.word	0x08005177
 800452c:	0800512e 	.word	0x0800512e
 8004530:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <__ssvfiscanf_r+0x2e4>)
 8004532:	2b00      	cmp	r3, #0
 8004534:	f43f aec5 	beq.w	80042c2 <__ssvfiscanf_r+0x4a>
 8004538:	466b      	mov	r3, sp
 800453a:	4622      	mov	r2, r4
 800453c:	a941      	add	r1, sp, #260	@ 0x104
 800453e:	4630      	mov	r0, r6
 8004540:	f3af 8000 	nop.w
 8004544:	e7a0      	b.n	8004488 <__ssvfiscanf_r+0x210>
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	065b      	lsls	r3, r3, #25
 800454a:	f53f af71 	bmi.w	8004430 <__ssvfiscanf_r+0x1b8>
 800454e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8004552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004556:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004558:	e7f9      	b.n	800454e <__ssvfiscanf_r+0x2d6>
 800455a:	bf00      	nop
 800455c:	00000000 	.word	0x00000000

08004560 <_printf_common>:
 8004560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004564:	4616      	mov	r6, r2
 8004566:	4698      	mov	r8, r3
 8004568:	688a      	ldr	r2, [r1, #8]
 800456a:	690b      	ldr	r3, [r1, #16]
 800456c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004570:	4293      	cmp	r3, r2
 8004572:	bfb8      	it	lt
 8004574:	4613      	movlt	r3, r2
 8004576:	6033      	str	r3, [r6, #0]
 8004578:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800457c:	4607      	mov	r7, r0
 800457e:	460c      	mov	r4, r1
 8004580:	b10a      	cbz	r2, 8004586 <_printf_common+0x26>
 8004582:	3301      	adds	r3, #1
 8004584:	6033      	str	r3, [r6, #0]
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	0699      	lsls	r1, r3, #26
 800458a:	bf42      	ittt	mi
 800458c:	6833      	ldrmi	r3, [r6, #0]
 800458e:	3302      	addmi	r3, #2
 8004590:	6033      	strmi	r3, [r6, #0]
 8004592:	6825      	ldr	r5, [r4, #0]
 8004594:	f015 0506 	ands.w	r5, r5, #6
 8004598:	d106      	bne.n	80045a8 <_printf_common+0x48>
 800459a:	f104 0a19 	add.w	sl, r4, #25
 800459e:	68e3      	ldr	r3, [r4, #12]
 80045a0:	6832      	ldr	r2, [r6, #0]
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	42ab      	cmp	r3, r5
 80045a6:	dc26      	bgt.n	80045f6 <_printf_common+0x96>
 80045a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045ac:	6822      	ldr	r2, [r4, #0]
 80045ae:	3b00      	subs	r3, #0
 80045b0:	bf18      	it	ne
 80045b2:	2301      	movne	r3, #1
 80045b4:	0692      	lsls	r2, r2, #26
 80045b6:	d42b      	bmi.n	8004610 <_printf_common+0xb0>
 80045b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045bc:	4641      	mov	r1, r8
 80045be:	4638      	mov	r0, r7
 80045c0:	47c8      	blx	r9
 80045c2:	3001      	adds	r0, #1
 80045c4:	d01e      	beq.n	8004604 <_printf_common+0xa4>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	6922      	ldr	r2, [r4, #16]
 80045ca:	f003 0306 	and.w	r3, r3, #6
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	bf02      	ittt	eq
 80045d2:	68e5      	ldreq	r5, [r4, #12]
 80045d4:	6833      	ldreq	r3, [r6, #0]
 80045d6:	1aed      	subeq	r5, r5, r3
 80045d8:	68a3      	ldr	r3, [r4, #8]
 80045da:	bf0c      	ite	eq
 80045dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045e0:	2500      	movne	r5, #0
 80045e2:	4293      	cmp	r3, r2
 80045e4:	bfc4      	itt	gt
 80045e6:	1a9b      	subgt	r3, r3, r2
 80045e8:	18ed      	addgt	r5, r5, r3
 80045ea:	2600      	movs	r6, #0
 80045ec:	341a      	adds	r4, #26
 80045ee:	42b5      	cmp	r5, r6
 80045f0:	d11a      	bne.n	8004628 <_printf_common+0xc8>
 80045f2:	2000      	movs	r0, #0
 80045f4:	e008      	b.n	8004608 <_printf_common+0xa8>
 80045f6:	2301      	movs	r3, #1
 80045f8:	4652      	mov	r2, sl
 80045fa:	4641      	mov	r1, r8
 80045fc:	4638      	mov	r0, r7
 80045fe:	47c8      	blx	r9
 8004600:	3001      	adds	r0, #1
 8004602:	d103      	bne.n	800460c <_printf_common+0xac>
 8004604:	f04f 30ff 	mov.w	r0, #4294967295
 8004608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460c:	3501      	adds	r5, #1
 800460e:	e7c6      	b.n	800459e <_printf_common+0x3e>
 8004610:	18e1      	adds	r1, r4, r3
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	2030      	movs	r0, #48	@ 0x30
 8004616:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800461a:	4422      	add	r2, r4
 800461c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004620:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004624:	3302      	adds	r3, #2
 8004626:	e7c7      	b.n	80045b8 <_printf_common+0x58>
 8004628:	2301      	movs	r3, #1
 800462a:	4622      	mov	r2, r4
 800462c:	4641      	mov	r1, r8
 800462e:	4638      	mov	r0, r7
 8004630:	47c8      	blx	r9
 8004632:	3001      	adds	r0, #1
 8004634:	d0e6      	beq.n	8004604 <_printf_common+0xa4>
 8004636:	3601      	adds	r6, #1
 8004638:	e7d9      	b.n	80045ee <_printf_common+0x8e>
	...

0800463c <_printf_i>:
 800463c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004640:	7e0f      	ldrb	r7, [r1, #24]
 8004642:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004644:	2f78      	cmp	r7, #120	@ 0x78
 8004646:	4691      	mov	r9, r2
 8004648:	4680      	mov	r8, r0
 800464a:	460c      	mov	r4, r1
 800464c:	469a      	mov	sl, r3
 800464e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004652:	d807      	bhi.n	8004664 <_printf_i+0x28>
 8004654:	2f62      	cmp	r7, #98	@ 0x62
 8004656:	d80a      	bhi.n	800466e <_printf_i+0x32>
 8004658:	2f00      	cmp	r7, #0
 800465a:	f000 80d2 	beq.w	8004802 <_printf_i+0x1c6>
 800465e:	2f58      	cmp	r7, #88	@ 0x58
 8004660:	f000 80b9 	beq.w	80047d6 <_printf_i+0x19a>
 8004664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004668:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800466c:	e03a      	b.n	80046e4 <_printf_i+0xa8>
 800466e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004672:	2b15      	cmp	r3, #21
 8004674:	d8f6      	bhi.n	8004664 <_printf_i+0x28>
 8004676:	a101      	add	r1, pc, #4	@ (adr r1, 800467c <_printf_i+0x40>)
 8004678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800467c:	080046d5 	.word	0x080046d5
 8004680:	080046e9 	.word	0x080046e9
 8004684:	08004665 	.word	0x08004665
 8004688:	08004665 	.word	0x08004665
 800468c:	08004665 	.word	0x08004665
 8004690:	08004665 	.word	0x08004665
 8004694:	080046e9 	.word	0x080046e9
 8004698:	08004665 	.word	0x08004665
 800469c:	08004665 	.word	0x08004665
 80046a0:	08004665 	.word	0x08004665
 80046a4:	08004665 	.word	0x08004665
 80046a8:	080047e9 	.word	0x080047e9
 80046ac:	08004713 	.word	0x08004713
 80046b0:	080047a3 	.word	0x080047a3
 80046b4:	08004665 	.word	0x08004665
 80046b8:	08004665 	.word	0x08004665
 80046bc:	0800480b 	.word	0x0800480b
 80046c0:	08004665 	.word	0x08004665
 80046c4:	08004713 	.word	0x08004713
 80046c8:	08004665 	.word	0x08004665
 80046cc:	08004665 	.word	0x08004665
 80046d0:	080047ab 	.word	0x080047ab
 80046d4:	6833      	ldr	r3, [r6, #0]
 80046d6:	1d1a      	adds	r2, r3, #4
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6032      	str	r2, [r6, #0]
 80046dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046e4:	2301      	movs	r3, #1
 80046e6:	e09d      	b.n	8004824 <_printf_i+0x1e8>
 80046e8:	6833      	ldr	r3, [r6, #0]
 80046ea:	6820      	ldr	r0, [r4, #0]
 80046ec:	1d19      	adds	r1, r3, #4
 80046ee:	6031      	str	r1, [r6, #0]
 80046f0:	0606      	lsls	r6, r0, #24
 80046f2:	d501      	bpl.n	80046f8 <_printf_i+0xbc>
 80046f4:	681d      	ldr	r5, [r3, #0]
 80046f6:	e003      	b.n	8004700 <_printf_i+0xc4>
 80046f8:	0645      	lsls	r5, r0, #25
 80046fa:	d5fb      	bpl.n	80046f4 <_printf_i+0xb8>
 80046fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004700:	2d00      	cmp	r5, #0
 8004702:	da03      	bge.n	800470c <_printf_i+0xd0>
 8004704:	232d      	movs	r3, #45	@ 0x2d
 8004706:	426d      	negs	r5, r5
 8004708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800470c:	4859      	ldr	r0, [pc, #356]	@ (8004874 <_printf_i+0x238>)
 800470e:	230a      	movs	r3, #10
 8004710:	e011      	b.n	8004736 <_printf_i+0xfa>
 8004712:	6821      	ldr	r1, [r4, #0]
 8004714:	6833      	ldr	r3, [r6, #0]
 8004716:	0608      	lsls	r0, r1, #24
 8004718:	f853 5b04 	ldr.w	r5, [r3], #4
 800471c:	d402      	bmi.n	8004724 <_printf_i+0xe8>
 800471e:	0649      	lsls	r1, r1, #25
 8004720:	bf48      	it	mi
 8004722:	b2ad      	uxthmi	r5, r5
 8004724:	2f6f      	cmp	r7, #111	@ 0x6f
 8004726:	4853      	ldr	r0, [pc, #332]	@ (8004874 <_printf_i+0x238>)
 8004728:	6033      	str	r3, [r6, #0]
 800472a:	bf14      	ite	ne
 800472c:	230a      	movne	r3, #10
 800472e:	2308      	moveq	r3, #8
 8004730:	2100      	movs	r1, #0
 8004732:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004736:	6866      	ldr	r6, [r4, #4]
 8004738:	60a6      	str	r6, [r4, #8]
 800473a:	2e00      	cmp	r6, #0
 800473c:	bfa2      	ittt	ge
 800473e:	6821      	ldrge	r1, [r4, #0]
 8004740:	f021 0104 	bicge.w	r1, r1, #4
 8004744:	6021      	strge	r1, [r4, #0]
 8004746:	b90d      	cbnz	r5, 800474c <_printf_i+0x110>
 8004748:	2e00      	cmp	r6, #0
 800474a:	d04b      	beq.n	80047e4 <_printf_i+0x1a8>
 800474c:	4616      	mov	r6, r2
 800474e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004752:	fb03 5711 	mls	r7, r3, r1, r5
 8004756:	5dc7      	ldrb	r7, [r0, r7]
 8004758:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800475c:	462f      	mov	r7, r5
 800475e:	42bb      	cmp	r3, r7
 8004760:	460d      	mov	r5, r1
 8004762:	d9f4      	bls.n	800474e <_printf_i+0x112>
 8004764:	2b08      	cmp	r3, #8
 8004766:	d10b      	bne.n	8004780 <_printf_i+0x144>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	07df      	lsls	r7, r3, #31
 800476c:	d508      	bpl.n	8004780 <_printf_i+0x144>
 800476e:	6923      	ldr	r3, [r4, #16]
 8004770:	6861      	ldr	r1, [r4, #4]
 8004772:	4299      	cmp	r1, r3
 8004774:	bfde      	ittt	le
 8004776:	2330      	movle	r3, #48	@ 0x30
 8004778:	f806 3c01 	strble.w	r3, [r6, #-1]
 800477c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004780:	1b92      	subs	r2, r2, r6
 8004782:	6122      	str	r2, [r4, #16]
 8004784:	f8cd a000 	str.w	sl, [sp]
 8004788:	464b      	mov	r3, r9
 800478a:	aa03      	add	r2, sp, #12
 800478c:	4621      	mov	r1, r4
 800478e:	4640      	mov	r0, r8
 8004790:	f7ff fee6 	bl	8004560 <_printf_common>
 8004794:	3001      	adds	r0, #1
 8004796:	d14a      	bne.n	800482e <_printf_i+0x1f2>
 8004798:	f04f 30ff 	mov.w	r0, #4294967295
 800479c:	b004      	add	sp, #16
 800479e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	f043 0320 	orr.w	r3, r3, #32
 80047a8:	6023      	str	r3, [r4, #0]
 80047aa:	4833      	ldr	r0, [pc, #204]	@ (8004878 <_printf_i+0x23c>)
 80047ac:	2778      	movs	r7, #120	@ 0x78
 80047ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	6831      	ldr	r1, [r6, #0]
 80047b6:	061f      	lsls	r7, r3, #24
 80047b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80047bc:	d402      	bmi.n	80047c4 <_printf_i+0x188>
 80047be:	065f      	lsls	r7, r3, #25
 80047c0:	bf48      	it	mi
 80047c2:	b2ad      	uxthmi	r5, r5
 80047c4:	6031      	str	r1, [r6, #0]
 80047c6:	07d9      	lsls	r1, r3, #31
 80047c8:	bf44      	itt	mi
 80047ca:	f043 0320 	orrmi.w	r3, r3, #32
 80047ce:	6023      	strmi	r3, [r4, #0]
 80047d0:	b11d      	cbz	r5, 80047da <_printf_i+0x19e>
 80047d2:	2310      	movs	r3, #16
 80047d4:	e7ac      	b.n	8004730 <_printf_i+0xf4>
 80047d6:	4827      	ldr	r0, [pc, #156]	@ (8004874 <_printf_i+0x238>)
 80047d8:	e7e9      	b.n	80047ae <_printf_i+0x172>
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	f023 0320 	bic.w	r3, r3, #32
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	e7f6      	b.n	80047d2 <_printf_i+0x196>
 80047e4:	4616      	mov	r6, r2
 80047e6:	e7bd      	b.n	8004764 <_printf_i+0x128>
 80047e8:	6833      	ldr	r3, [r6, #0]
 80047ea:	6825      	ldr	r5, [r4, #0]
 80047ec:	6961      	ldr	r1, [r4, #20]
 80047ee:	1d18      	adds	r0, r3, #4
 80047f0:	6030      	str	r0, [r6, #0]
 80047f2:	062e      	lsls	r6, r5, #24
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	d501      	bpl.n	80047fc <_printf_i+0x1c0>
 80047f8:	6019      	str	r1, [r3, #0]
 80047fa:	e002      	b.n	8004802 <_printf_i+0x1c6>
 80047fc:	0668      	lsls	r0, r5, #25
 80047fe:	d5fb      	bpl.n	80047f8 <_printf_i+0x1bc>
 8004800:	8019      	strh	r1, [r3, #0]
 8004802:	2300      	movs	r3, #0
 8004804:	6123      	str	r3, [r4, #16]
 8004806:	4616      	mov	r6, r2
 8004808:	e7bc      	b.n	8004784 <_printf_i+0x148>
 800480a:	6833      	ldr	r3, [r6, #0]
 800480c:	1d1a      	adds	r2, r3, #4
 800480e:	6032      	str	r2, [r6, #0]
 8004810:	681e      	ldr	r6, [r3, #0]
 8004812:	6862      	ldr	r2, [r4, #4]
 8004814:	2100      	movs	r1, #0
 8004816:	4630      	mov	r0, r6
 8004818:	f7fb fce2 	bl	80001e0 <memchr>
 800481c:	b108      	cbz	r0, 8004822 <_printf_i+0x1e6>
 800481e:	1b80      	subs	r0, r0, r6
 8004820:	6060      	str	r0, [r4, #4]
 8004822:	6863      	ldr	r3, [r4, #4]
 8004824:	6123      	str	r3, [r4, #16]
 8004826:	2300      	movs	r3, #0
 8004828:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800482c:	e7aa      	b.n	8004784 <_printf_i+0x148>
 800482e:	6923      	ldr	r3, [r4, #16]
 8004830:	4632      	mov	r2, r6
 8004832:	4649      	mov	r1, r9
 8004834:	4640      	mov	r0, r8
 8004836:	47d0      	blx	sl
 8004838:	3001      	adds	r0, #1
 800483a:	d0ad      	beq.n	8004798 <_printf_i+0x15c>
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	079b      	lsls	r3, r3, #30
 8004840:	d413      	bmi.n	800486a <_printf_i+0x22e>
 8004842:	68e0      	ldr	r0, [r4, #12]
 8004844:	9b03      	ldr	r3, [sp, #12]
 8004846:	4298      	cmp	r0, r3
 8004848:	bfb8      	it	lt
 800484a:	4618      	movlt	r0, r3
 800484c:	e7a6      	b.n	800479c <_printf_i+0x160>
 800484e:	2301      	movs	r3, #1
 8004850:	4632      	mov	r2, r6
 8004852:	4649      	mov	r1, r9
 8004854:	4640      	mov	r0, r8
 8004856:	47d0      	blx	sl
 8004858:	3001      	adds	r0, #1
 800485a:	d09d      	beq.n	8004798 <_printf_i+0x15c>
 800485c:	3501      	adds	r5, #1
 800485e:	68e3      	ldr	r3, [r4, #12]
 8004860:	9903      	ldr	r1, [sp, #12]
 8004862:	1a5b      	subs	r3, r3, r1
 8004864:	42ab      	cmp	r3, r5
 8004866:	dcf2      	bgt.n	800484e <_printf_i+0x212>
 8004868:	e7eb      	b.n	8004842 <_printf_i+0x206>
 800486a:	2500      	movs	r5, #0
 800486c:	f104 0619 	add.w	r6, r4, #25
 8004870:	e7f5      	b.n	800485e <_printf_i+0x222>
 8004872:	bf00      	nop
 8004874:	08005139 	.word	0x08005139
 8004878:	0800514a 	.word	0x0800514a

0800487c <_scanf_chars>:
 800487c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004880:	4615      	mov	r5, r2
 8004882:	688a      	ldr	r2, [r1, #8]
 8004884:	4680      	mov	r8, r0
 8004886:	460c      	mov	r4, r1
 8004888:	b932      	cbnz	r2, 8004898 <_scanf_chars+0x1c>
 800488a:	698a      	ldr	r2, [r1, #24]
 800488c:	2a00      	cmp	r2, #0
 800488e:	bf14      	ite	ne
 8004890:	f04f 32ff 	movne.w	r2, #4294967295
 8004894:	2201      	moveq	r2, #1
 8004896:	608a      	str	r2, [r1, #8]
 8004898:	6822      	ldr	r2, [r4, #0]
 800489a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800492c <_scanf_chars+0xb0>
 800489e:	06d1      	lsls	r1, r2, #27
 80048a0:	bf5f      	itttt	pl
 80048a2:	681a      	ldrpl	r2, [r3, #0]
 80048a4:	1d11      	addpl	r1, r2, #4
 80048a6:	6019      	strpl	r1, [r3, #0]
 80048a8:	6816      	ldrpl	r6, [r2, #0]
 80048aa:	2700      	movs	r7, #0
 80048ac:	69a0      	ldr	r0, [r4, #24]
 80048ae:	b188      	cbz	r0, 80048d4 <_scanf_chars+0x58>
 80048b0:	2801      	cmp	r0, #1
 80048b2:	d107      	bne.n	80048c4 <_scanf_chars+0x48>
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	6963      	ldr	r3, [r4, #20]
 80048ba:	5c9b      	ldrb	r3, [r3, r2]
 80048bc:	b953      	cbnz	r3, 80048d4 <_scanf_chars+0x58>
 80048be:	2f00      	cmp	r7, #0
 80048c0:	d031      	beq.n	8004926 <_scanf_chars+0xaa>
 80048c2:	e022      	b.n	800490a <_scanf_chars+0x8e>
 80048c4:	2802      	cmp	r0, #2
 80048c6:	d120      	bne.n	800490a <_scanf_chars+0x8e>
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80048d0:	071b      	lsls	r3, r3, #28
 80048d2:	d41a      	bmi.n	800490a <_scanf_chars+0x8e>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	06da      	lsls	r2, r3, #27
 80048d8:	bf5e      	ittt	pl
 80048da:	682b      	ldrpl	r3, [r5, #0]
 80048dc:	781b      	ldrbpl	r3, [r3, #0]
 80048de:	f806 3b01 	strbpl.w	r3, [r6], #1
 80048e2:	682a      	ldr	r2, [r5, #0]
 80048e4:	686b      	ldr	r3, [r5, #4]
 80048e6:	3201      	adds	r2, #1
 80048e8:	602a      	str	r2, [r5, #0]
 80048ea:	68a2      	ldr	r2, [r4, #8]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	3a01      	subs	r2, #1
 80048f0:	606b      	str	r3, [r5, #4]
 80048f2:	3701      	adds	r7, #1
 80048f4:	60a2      	str	r2, [r4, #8]
 80048f6:	b142      	cbz	r2, 800490a <_scanf_chars+0x8e>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	dcd7      	bgt.n	80048ac <_scanf_chars+0x30>
 80048fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004900:	4629      	mov	r1, r5
 8004902:	4640      	mov	r0, r8
 8004904:	4798      	blx	r3
 8004906:	2800      	cmp	r0, #0
 8004908:	d0d0      	beq.n	80048ac <_scanf_chars+0x30>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	f013 0310 	ands.w	r3, r3, #16
 8004910:	d105      	bne.n	800491e <_scanf_chars+0xa2>
 8004912:	68e2      	ldr	r2, [r4, #12]
 8004914:	3201      	adds	r2, #1
 8004916:	60e2      	str	r2, [r4, #12]
 8004918:	69a2      	ldr	r2, [r4, #24]
 800491a:	b102      	cbz	r2, 800491e <_scanf_chars+0xa2>
 800491c:	7033      	strb	r3, [r6, #0]
 800491e:	6923      	ldr	r3, [r4, #16]
 8004920:	443b      	add	r3, r7
 8004922:	6123      	str	r3, [r4, #16]
 8004924:	2000      	movs	r0, #0
 8004926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800492a:	bf00      	nop
 800492c:	08005177 	.word	0x08005177

08004930 <_scanf_i>:
 8004930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004934:	4698      	mov	r8, r3
 8004936:	4b74      	ldr	r3, [pc, #464]	@ (8004b08 <_scanf_i+0x1d8>)
 8004938:	460c      	mov	r4, r1
 800493a:	4682      	mov	sl, r0
 800493c:	4616      	mov	r6, r2
 800493e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004942:	b087      	sub	sp, #28
 8004944:	ab03      	add	r3, sp, #12
 8004946:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800494a:	4b70      	ldr	r3, [pc, #448]	@ (8004b0c <_scanf_i+0x1dc>)
 800494c:	69a1      	ldr	r1, [r4, #24]
 800494e:	4a70      	ldr	r2, [pc, #448]	@ (8004b10 <_scanf_i+0x1e0>)
 8004950:	2903      	cmp	r1, #3
 8004952:	bf08      	it	eq
 8004954:	461a      	moveq	r2, r3
 8004956:	68a3      	ldr	r3, [r4, #8]
 8004958:	9201      	str	r2, [sp, #4]
 800495a:	1e5a      	subs	r2, r3, #1
 800495c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004960:	bf88      	it	hi
 8004962:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004966:	4627      	mov	r7, r4
 8004968:	bf82      	ittt	hi
 800496a:	eb03 0905 	addhi.w	r9, r3, r5
 800496e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004972:	60a3      	strhi	r3, [r4, #8]
 8004974:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004978:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800497c:	bf98      	it	ls
 800497e:	f04f 0900 	movls.w	r9, #0
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	463d      	mov	r5, r7
 8004986:	f04f 0b00 	mov.w	fp, #0
 800498a:	6831      	ldr	r1, [r6, #0]
 800498c:	ab03      	add	r3, sp, #12
 800498e:	7809      	ldrb	r1, [r1, #0]
 8004990:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004994:	2202      	movs	r2, #2
 8004996:	f7fb fc23 	bl	80001e0 <memchr>
 800499a:	b328      	cbz	r0, 80049e8 <_scanf_i+0xb8>
 800499c:	f1bb 0f01 	cmp.w	fp, #1
 80049a0:	d159      	bne.n	8004a56 <_scanf_i+0x126>
 80049a2:	6862      	ldr	r2, [r4, #4]
 80049a4:	b92a      	cbnz	r2, 80049b2 <_scanf_i+0x82>
 80049a6:	6822      	ldr	r2, [r4, #0]
 80049a8:	2108      	movs	r1, #8
 80049aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ae:	6061      	str	r1, [r4, #4]
 80049b0:	6022      	str	r2, [r4, #0]
 80049b2:	6822      	ldr	r2, [r4, #0]
 80049b4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80049b8:	6022      	str	r2, [r4, #0]
 80049ba:	68a2      	ldr	r2, [r4, #8]
 80049bc:	1e51      	subs	r1, r2, #1
 80049be:	60a1      	str	r1, [r4, #8]
 80049c0:	b192      	cbz	r2, 80049e8 <_scanf_i+0xb8>
 80049c2:	6832      	ldr	r2, [r6, #0]
 80049c4:	1c51      	adds	r1, r2, #1
 80049c6:	6031      	str	r1, [r6, #0]
 80049c8:	7812      	ldrb	r2, [r2, #0]
 80049ca:	f805 2b01 	strb.w	r2, [r5], #1
 80049ce:	6872      	ldr	r2, [r6, #4]
 80049d0:	3a01      	subs	r2, #1
 80049d2:	2a00      	cmp	r2, #0
 80049d4:	6072      	str	r2, [r6, #4]
 80049d6:	dc07      	bgt.n	80049e8 <_scanf_i+0xb8>
 80049d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80049dc:	4631      	mov	r1, r6
 80049de:	4650      	mov	r0, sl
 80049e0:	4790      	blx	r2
 80049e2:	2800      	cmp	r0, #0
 80049e4:	f040 8085 	bne.w	8004af2 <_scanf_i+0x1c2>
 80049e8:	f10b 0b01 	add.w	fp, fp, #1
 80049ec:	f1bb 0f03 	cmp.w	fp, #3
 80049f0:	d1cb      	bne.n	800498a <_scanf_i+0x5a>
 80049f2:	6863      	ldr	r3, [r4, #4]
 80049f4:	b90b      	cbnz	r3, 80049fa <_scanf_i+0xca>
 80049f6:	230a      	movs	r3, #10
 80049f8:	6063      	str	r3, [r4, #4]
 80049fa:	6863      	ldr	r3, [r4, #4]
 80049fc:	4945      	ldr	r1, [pc, #276]	@ (8004b14 <_scanf_i+0x1e4>)
 80049fe:	6960      	ldr	r0, [r4, #20]
 8004a00:	1ac9      	subs	r1, r1, r3
 8004a02:	f000 f889 	bl	8004b18 <__sccl>
 8004a06:	f04f 0b00 	mov.w	fp, #0
 8004a0a:	68a3      	ldr	r3, [r4, #8]
 8004a0c:	6822      	ldr	r2, [r4, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d03d      	beq.n	8004a8e <_scanf_i+0x15e>
 8004a12:	6831      	ldr	r1, [r6, #0]
 8004a14:	6960      	ldr	r0, [r4, #20]
 8004a16:	f891 c000 	ldrb.w	ip, [r1]
 8004a1a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	d035      	beq.n	8004a8e <_scanf_i+0x15e>
 8004a22:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8004a26:	d124      	bne.n	8004a72 <_scanf_i+0x142>
 8004a28:	0510      	lsls	r0, r2, #20
 8004a2a:	d522      	bpl.n	8004a72 <_scanf_i+0x142>
 8004a2c:	f10b 0b01 	add.w	fp, fp, #1
 8004a30:	f1b9 0f00 	cmp.w	r9, #0
 8004a34:	d003      	beq.n	8004a3e <_scanf_i+0x10e>
 8004a36:	3301      	adds	r3, #1
 8004a38:	f109 39ff 	add.w	r9, r9, #4294967295
 8004a3c:	60a3      	str	r3, [r4, #8]
 8004a3e:	6873      	ldr	r3, [r6, #4]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	6073      	str	r3, [r6, #4]
 8004a46:	dd1b      	ble.n	8004a80 <_scanf_i+0x150>
 8004a48:	6833      	ldr	r3, [r6, #0]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	6033      	str	r3, [r6, #0]
 8004a4e:	68a3      	ldr	r3, [r4, #8]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	60a3      	str	r3, [r4, #8]
 8004a54:	e7d9      	b.n	8004a0a <_scanf_i+0xda>
 8004a56:	f1bb 0f02 	cmp.w	fp, #2
 8004a5a:	d1ae      	bne.n	80049ba <_scanf_i+0x8a>
 8004a5c:	6822      	ldr	r2, [r4, #0]
 8004a5e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8004a62:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004a66:	d1bf      	bne.n	80049e8 <_scanf_i+0xb8>
 8004a68:	2110      	movs	r1, #16
 8004a6a:	6061      	str	r1, [r4, #4]
 8004a6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a70:	e7a2      	b.n	80049b8 <_scanf_i+0x88>
 8004a72:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8004a76:	6022      	str	r2, [r4, #0]
 8004a78:	780b      	ldrb	r3, [r1, #0]
 8004a7a:	f805 3b01 	strb.w	r3, [r5], #1
 8004a7e:	e7de      	b.n	8004a3e <_scanf_i+0x10e>
 8004a80:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004a84:	4631      	mov	r1, r6
 8004a86:	4650      	mov	r0, sl
 8004a88:	4798      	blx	r3
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d0df      	beq.n	8004a4e <_scanf_i+0x11e>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	05d9      	lsls	r1, r3, #23
 8004a92:	d50d      	bpl.n	8004ab0 <_scanf_i+0x180>
 8004a94:	42bd      	cmp	r5, r7
 8004a96:	d909      	bls.n	8004aac <_scanf_i+0x17c>
 8004a98:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004a9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004aa0:	4632      	mov	r2, r6
 8004aa2:	4650      	mov	r0, sl
 8004aa4:	4798      	blx	r3
 8004aa6:	f105 39ff 	add.w	r9, r5, #4294967295
 8004aaa:	464d      	mov	r5, r9
 8004aac:	42bd      	cmp	r5, r7
 8004aae:	d028      	beq.n	8004b02 <_scanf_i+0x1d2>
 8004ab0:	6822      	ldr	r2, [r4, #0]
 8004ab2:	f012 0210 	ands.w	r2, r2, #16
 8004ab6:	d113      	bne.n	8004ae0 <_scanf_i+0x1b0>
 8004ab8:	702a      	strb	r2, [r5, #0]
 8004aba:	6863      	ldr	r3, [r4, #4]
 8004abc:	9e01      	ldr	r6, [sp, #4]
 8004abe:	4639      	mov	r1, r7
 8004ac0:	4650      	mov	r0, sl
 8004ac2:	47b0      	blx	r6
 8004ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ac8:	6821      	ldr	r1, [r4, #0]
 8004aca:	1d1a      	adds	r2, r3, #4
 8004acc:	f8c8 2000 	str.w	r2, [r8]
 8004ad0:	f011 0f20 	tst.w	r1, #32
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	d00f      	beq.n	8004af8 <_scanf_i+0x1c8>
 8004ad8:	6018      	str	r0, [r3, #0]
 8004ada:	68e3      	ldr	r3, [r4, #12]
 8004adc:	3301      	adds	r3, #1
 8004ade:	60e3      	str	r3, [r4, #12]
 8004ae0:	6923      	ldr	r3, [r4, #16]
 8004ae2:	1bed      	subs	r5, r5, r7
 8004ae4:	445d      	add	r5, fp
 8004ae6:	442b      	add	r3, r5
 8004ae8:	6123      	str	r3, [r4, #16]
 8004aea:	2000      	movs	r0, #0
 8004aec:	b007      	add	sp, #28
 8004aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004af2:	f04f 0b00 	mov.w	fp, #0
 8004af6:	e7ca      	b.n	8004a8e <_scanf_i+0x15e>
 8004af8:	07ca      	lsls	r2, r1, #31
 8004afa:	bf4c      	ite	mi
 8004afc:	8018      	strhmi	r0, [r3, #0]
 8004afe:	6018      	strpl	r0, [r3, #0]
 8004b00:	e7eb      	b.n	8004ada <_scanf_i+0x1aa>
 8004b02:	2001      	movs	r0, #1
 8004b04:	e7f2      	b.n	8004aec <_scanf_i+0x1bc>
 8004b06:	bf00      	nop
 8004b08:	080050fc 	.word	0x080050fc
 8004b0c:	08004da5 	.word	0x08004da5
 8004b10:	08004e85 	.word	0x08004e85
 8004b14:	0800516b 	.word	0x0800516b

08004b18 <__sccl>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	780b      	ldrb	r3, [r1, #0]
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	2b5e      	cmp	r3, #94	@ 0x5e
 8004b20:	bf0b      	itete	eq
 8004b22:	784b      	ldrbeq	r3, [r1, #1]
 8004b24:	1c4a      	addne	r2, r1, #1
 8004b26:	1c8a      	addeq	r2, r1, #2
 8004b28:	2100      	movne	r1, #0
 8004b2a:	bf08      	it	eq
 8004b2c:	2101      	moveq	r1, #1
 8004b2e:	3801      	subs	r0, #1
 8004b30:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8004b34:	f800 1f01 	strb.w	r1, [r0, #1]!
 8004b38:	42a8      	cmp	r0, r5
 8004b3a:	d1fb      	bne.n	8004b34 <__sccl+0x1c>
 8004b3c:	b90b      	cbnz	r3, 8004b42 <__sccl+0x2a>
 8004b3e:	1e50      	subs	r0, r2, #1
 8004b40:	bd70      	pop	{r4, r5, r6, pc}
 8004b42:	f081 0101 	eor.w	r1, r1, #1
 8004b46:	54e1      	strb	r1, [r4, r3]
 8004b48:	4610      	mov	r0, r2
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004b50:	2d2d      	cmp	r5, #45	@ 0x2d
 8004b52:	d005      	beq.n	8004b60 <__sccl+0x48>
 8004b54:	2d5d      	cmp	r5, #93	@ 0x5d
 8004b56:	d016      	beq.n	8004b86 <__sccl+0x6e>
 8004b58:	2d00      	cmp	r5, #0
 8004b5a:	d0f1      	beq.n	8004b40 <__sccl+0x28>
 8004b5c:	462b      	mov	r3, r5
 8004b5e:	e7f2      	b.n	8004b46 <__sccl+0x2e>
 8004b60:	7846      	ldrb	r6, [r0, #1]
 8004b62:	2e5d      	cmp	r6, #93	@ 0x5d
 8004b64:	d0fa      	beq.n	8004b5c <__sccl+0x44>
 8004b66:	42b3      	cmp	r3, r6
 8004b68:	dcf8      	bgt.n	8004b5c <__sccl+0x44>
 8004b6a:	3002      	adds	r0, #2
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	3201      	adds	r2, #1
 8004b70:	4296      	cmp	r6, r2
 8004b72:	54a1      	strb	r1, [r4, r2]
 8004b74:	dcfb      	bgt.n	8004b6e <__sccl+0x56>
 8004b76:	1af2      	subs	r2, r6, r3
 8004b78:	3a01      	subs	r2, #1
 8004b7a:	1c5d      	adds	r5, r3, #1
 8004b7c:	42b3      	cmp	r3, r6
 8004b7e:	bfa8      	it	ge
 8004b80:	2200      	movge	r2, #0
 8004b82:	18ab      	adds	r3, r5, r2
 8004b84:	e7e1      	b.n	8004b4a <__sccl+0x32>
 8004b86:	4610      	mov	r0, r2
 8004b88:	e7da      	b.n	8004b40 <__sccl+0x28>

08004b8a <__submore>:
 8004b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b8e:	460c      	mov	r4, r1
 8004b90:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004b92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b96:	4299      	cmp	r1, r3
 8004b98:	d11d      	bne.n	8004bd6 <__submore+0x4c>
 8004b9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004b9e:	f7ff f92f 	bl	8003e00 <_malloc_r>
 8004ba2:	b918      	cbnz	r0, 8004bac <__submore+0x22>
 8004ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bb0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004bb2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8004bb6:	6360      	str	r0, [r4, #52]	@ 0x34
 8004bb8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8004bbc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004bc0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8004bc4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004bc8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8004bcc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8004bd0:	6020      	str	r0, [r4, #0]
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	e7e8      	b.n	8004ba8 <__submore+0x1e>
 8004bd6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8004bd8:	0077      	lsls	r7, r6, #1
 8004bda:	463a      	mov	r2, r7
 8004bdc:	f000 f83a 	bl	8004c54 <_realloc_r>
 8004be0:	4605      	mov	r5, r0
 8004be2:	2800      	cmp	r0, #0
 8004be4:	d0de      	beq.n	8004ba4 <__submore+0x1a>
 8004be6:	eb00 0806 	add.w	r8, r0, r6
 8004bea:	4601      	mov	r1, r0
 8004bec:	4632      	mov	r2, r6
 8004bee:	4640      	mov	r0, r8
 8004bf0:	f7ff f88c 	bl	8003d0c <memcpy>
 8004bf4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8004bf8:	f8c4 8000 	str.w	r8, [r4]
 8004bfc:	e7e9      	b.n	8004bd2 <__submore+0x48>

08004bfe <memmove>:
 8004bfe:	4288      	cmp	r0, r1
 8004c00:	b510      	push	{r4, lr}
 8004c02:	eb01 0402 	add.w	r4, r1, r2
 8004c06:	d902      	bls.n	8004c0e <memmove+0x10>
 8004c08:	4284      	cmp	r4, r0
 8004c0a:	4623      	mov	r3, r4
 8004c0c:	d807      	bhi.n	8004c1e <memmove+0x20>
 8004c0e:	1e43      	subs	r3, r0, #1
 8004c10:	42a1      	cmp	r1, r4
 8004c12:	d008      	beq.n	8004c26 <memmove+0x28>
 8004c14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c18:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c1c:	e7f8      	b.n	8004c10 <memmove+0x12>
 8004c1e:	4402      	add	r2, r0
 8004c20:	4601      	mov	r1, r0
 8004c22:	428a      	cmp	r2, r1
 8004c24:	d100      	bne.n	8004c28 <memmove+0x2a>
 8004c26:	bd10      	pop	{r4, pc}
 8004c28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c2c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c30:	e7f7      	b.n	8004c22 <memmove+0x24>
	...

08004c34 <_sbrk_r>:
 8004c34:	b538      	push	{r3, r4, r5, lr}
 8004c36:	4d06      	ldr	r5, [pc, #24]	@ (8004c50 <_sbrk_r+0x1c>)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	602b      	str	r3, [r5, #0]
 8004c40:	f7fc f944 	bl	8000ecc <_sbrk>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d102      	bne.n	8004c4e <_sbrk_r+0x1a>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	b103      	cbz	r3, 8004c4e <_sbrk_r+0x1a>
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	bd38      	pop	{r3, r4, r5, pc}
 8004c50:	20002a44 	.word	0x20002a44

08004c54 <_realloc_r>:
 8004c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c58:	4680      	mov	r8, r0
 8004c5a:	4615      	mov	r5, r2
 8004c5c:	460c      	mov	r4, r1
 8004c5e:	b921      	cbnz	r1, 8004c6a <_realloc_r+0x16>
 8004c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c64:	4611      	mov	r1, r2
 8004c66:	f7ff b8cb 	b.w	8003e00 <_malloc_r>
 8004c6a:	b92a      	cbnz	r2, 8004c78 <_realloc_r+0x24>
 8004c6c:	f7ff f85c 	bl	8003d28 <_free_r>
 8004c70:	2400      	movs	r4, #0
 8004c72:	4620      	mov	r0, r4
 8004c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c78:	f000 f906 	bl	8004e88 <_malloc_usable_size_r>
 8004c7c:	4285      	cmp	r5, r0
 8004c7e:	4606      	mov	r6, r0
 8004c80:	d802      	bhi.n	8004c88 <_realloc_r+0x34>
 8004c82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c86:	d8f4      	bhi.n	8004c72 <_realloc_r+0x1e>
 8004c88:	4629      	mov	r1, r5
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	f7ff f8b8 	bl	8003e00 <_malloc_r>
 8004c90:	4607      	mov	r7, r0
 8004c92:	2800      	cmp	r0, #0
 8004c94:	d0ec      	beq.n	8004c70 <_realloc_r+0x1c>
 8004c96:	42b5      	cmp	r5, r6
 8004c98:	462a      	mov	r2, r5
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	bf28      	it	cs
 8004c9e:	4632      	movcs	r2, r6
 8004ca0:	f7ff f834 	bl	8003d0c <memcpy>
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	4640      	mov	r0, r8
 8004ca8:	f7ff f83e 	bl	8003d28 <_free_r>
 8004cac:	463c      	mov	r4, r7
 8004cae:	e7e0      	b.n	8004c72 <_realloc_r+0x1e>

08004cb0 <_strtol_l.constprop.0>:
 8004cb0:	2b24      	cmp	r3, #36	@ 0x24
 8004cb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb6:	4686      	mov	lr, r0
 8004cb8:	4690      	mov	r8, r2
 8004cba:	d801      	bhi.n	8004cc0 <_strtol_l.constprop.0+0x10>
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d106      	bne.n	8004cce <_strtol_l.constprop.0+0x1e>
 8004cc0:	f7fe fff0 	bl	8003ca4 <__errno>
 8004cc4:	2316      	movs	r3, #22
 8004cc6:	6003      	str	r3, [r0, #0]
 8004cc8:	2000      	movs	r0, #0
 8004cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cce:	4834      	ldr	r0, [pc, #208]	@ (8004da0 <_strtol_l.constprop.0+0xf0>)
 8004cd0:	460d      	mov	r5, r1
 8004cd2:	462a      	mov	r2, r5
 8004cd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cd8:	5d06      	ldrb	r6, [r0, r4]
 8004cda:	f016 0608 	ands.w	r6, r6, #8
 8004cde:	d1f8      	bne.n	8004cd2 <_strtol_l.constprop.0+0x22>
 8004ce0:	2c2d      	cmp	r4, #45	@ 0x2d
 8004ce2:	d12d      	bne.n	8004d40 <_strtol_l.constprop.0+0x90>
 8004ce4:	782c      	ldrb	r4, [r5, #0]
 8004ce6:	2601      	movs	r6, #1
 8004ce8:	1c95      	adds	r5, r2, #2
 8004cea:	f033 0210 	bics.w	r2, r3, #16
 8004cee:	d109      	bne.n	8004d04 <_strtol_l.constprop.0+0x54>
 8004cf0:	2c30      	cmp	r4, #48	@ 0x30
 8004cf2:	d12a      	bne.n	8004d4a <_strtol_l.constprop.0+0x9a>
 8004cf4:	782a      	ldrb	r2, [r5, #0]
 8004cf6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004cfa:	2a58      	cmp	r2, #88	@ 0x58
 8004cfc:	d125      	bne.n	8004d4a <_strtol_l.constprop.0+0x9a>
 8004cfe:	786c      	ldrb	r4, [r5, #1]
 8004d00:	2310      	movs	r3, #16
 8004d02:	3502      	adds	r5, #2
 8004d04:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004d08:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	fbbc f9f3 	udiv	r9, ip, r3
 8004d12:	4610      	mov	r0, r2
 8004d14:	fb03 ca19 	mls	sl, r3, r9, ip
 8004d18:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004d1c:	2f09      	cmp	r7, #9
 8004d1e:	d81b      	bhi.n	8004d58 <_strtol_l.constprop.0+0xa8>
 8004d20:	463c      	mov	r4, r7
 8004d22:	42a3      	cmp	r3, r4
 8004d24:	dd27      	ble.n	8004d76 <_strtol_l.constprop.0+0xc6>
 8004d26:	1c57      	adds	r7, r2, #1
 8004d28:	d007      	beq.n	8004d3a <_strtol_l.constprop.0+0x8a>
 8004d2a:	4581      	cmp	r9, r0
 8004d2c:	d320      	bcc.n	8004d70 <_strtol_l.constprop.0+0xc0>
 8004d2e:	d101      	bne.n	8004d34 <_strtol_l.constprop.0+0x84>
 8004d30:	45a2      	cmp	sl, r4
 8004d32:	db1d      	blt.n	8004d70 <_strtol_l.constprop.0+0xc0>
 8004d34:	fb00 4003 	mla	r0, r0, r3, r4
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d3e:	e7eb      	b.n	8004d18 <_strtol_l.constprop.0+0x68>
 8004d40:	2c2b      	cmp	r4, #43	@ 0x2b
 8004d42:	bf04      	itt	eq
 8004d44:	782c      	ldrbeq	r4, [r5, #0]
 8004d46:	1c95      	addeq	r5, r2, #2
 8004d48:	e7cf      	b.n	8004cea <_strtol_l.constprop.0+0x3a>
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1da      	bne.n	8004d04 <_strtol_l.constprop.0+0x54>
 8004d4e:	2c30      	cmp	r4, #48	@ 0x30
 8004d50:	bf0c      	ite	eq
 8004d52:	2308      	moveq	r3, #8
 8004d54:	230a      	movne	r3, #10
 8004d56:	e7d5      	b.n	8004d04 <_strtol_l.constprop.0+0x54>
 8004d58:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004d5c:	2f19      	cmp	r7, #25
 8004d5e:	d801      	bhi.n	8004d64 <_strtol_l.constprop.0+0xb4>
 8004d60:	3c37      	subs	r4, #55	@ 0x37
 8004d62:	e7de      	b.n	8004d22 <_strtol_l.constprop.0+0x72>
 8004d64:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004d68:	2f19      	cmp	r7, #25
 8004d6a:	d804      	bhi.n	8004d76 <_strtol_l.constprop.0+0xc6>
 8004d6c:	3c57      	subs	r4, #87	@ 0x57
 8004d6e:	e7d8      	b.n	8004d22 <_strtol_l.constprop.0+0x72>
 8004d70:	f04f 32ff 	mov.w	r2, #4294967295
 8004d74:	e7e1      	b.n	8004d3a <_strtol_l.constprop.0+0x8a>
 8004d76:	1c53      	adds	r3, r2, #1
 8004d78:	d108      	bne.n	8004d8c <_strtol_l.constprop.0+0xdc>
 8004d7a:	2322      	movs	r3, #34	@ 0x22
 8004d7c:	f8ce 3000 	str.w	r3, [lr]
 8004d80:	4660      	mov	r0, ip
 8004d82:	f1b8 0f00 	cmp.w	r8, #0
 8004d86:	d0a0      	beq.n	8004cca <_strtol_l.constprop.0+0x1a>
 8004d88:	1e69      	subs	r1, r5, #1
 8004d8a:	e006      	b.n	8004d9a <_strtol_l.constprop.0+0xea>
 8004d8c:	b106      	cbz	r6, 8004d90 <_strtol_l.constprop.0+0xe0>
 8004d8e:	4240      	negs	r0, r0
 8004d90:	f1b8 0f00 	cmp.w	r8, #0
 8004d94:	d099      	beq.n	8004cca <_strtol_l.constprop.0+0x1a>
 8004d96:	2a00      	cmp	r2, #0
 8004d98:	d1f6      	bne.n	8004d88 <_strtol_l.constprop.0+0xd8>
 8004d9a:	f8c8 1000 	str.w	r1, [r8]
 8004d9e:	e794      	b.n	8004cca <_strtol_l.constprop.0+0x1a>
 8004da0:	08005177 	.word	0x08005177

08004da4 <_strtol_r>:
 8004da4:	f7ff bf84 	b.w	8004cb0 <_strtol_l.constprop.0>

08004da8 <_strtoul_l.constprop.0>:
 8004da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004dac:	4e34      	ldr	r6, [pc, #208]	@ (8004e80 <_strtoul_l.constprop.0+0xd8>)
 8004dae:	4686      	mov	lr, r0
 8004db0:	460d      	mov	r5, r1
 8004db2:	4628      	mov	r0, r5
 8004db4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004db8:	5d37      	ldrb	r7, [r6, r4]
 8004dba:	f017 0708 	ands.w	r7, r7, #8
 8004dbe:	d1f8      	bne.n	8004db2 <_strtoul_l.constprop.0+0xa>
 8004dc0:	2c2d      	cmp	r4, #45	@ 0x2d
 8004dc2:	d12f      	bne.n	8004e24 <_strtoul_l.constprop.0+0x7c>
 8004dc4:	782c      	ldrb	r4, [r5, #0]
 8004dc6:	2701      	movs	r7, #1
 8004dc8:	1c85      	adds	r5, r0, #2
 8004dca:	f033 0010 	bics.w	r0, r3, #16
 8004dce:	d109      	bne.n	8004de4 <_strtoul_l.constprop.0+0x3c>
 8004dd0:	2c30      	cmp	r4, #48	@ 0x30
 8004dd2:	d12c      	bne.n	8004e2e <_strtoul_l.constprop.0+0x86>
 8004dd4:	7828      	ldrb	r0, [r5, #0]
 8004dd6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8004dda:	2858      	cmp	r0, #88	@ 0x58
 8004ddc:	d127      	bne.n	8004e2e <_strtoul_l.constprop.0+0x86>
 8004dde:	786c      	ldrb	r4, [r5, #1]
 8004de0:	2310      	movs	r3, #16
 8004de2:	3502      	adds	r5, #2
 8004de4:	f04f 38ff 	mov.w	r8, #4294967295
 8004de8:	2600      	movs	r6, #0
 8004dea:	fbb8 f8f3 	udiv	r8, r8, r3
 8004dee:	fb03 f908 	mul.w	r9, r3, r8
 8004df2:	ea6f 0909 	mvn.w	r9, r9
 8004df6:	4630      	mov	r0, r6
 8004df8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8004dfc:	f1bc 0f09 	cmp.w	ip, #9
 8004e00:	d81c      	bhi.n	8004e3c <_strtoul_l.constprop.0+0x94>
 8004e02:	4664      	mov	r4, ip
 8004e04:	42a3      	cmp	r3, r4
 8004e06:	dd2a      	ble.n	8004e5e <_strtoul_l.constprop.0+0xb6>
 8004e08:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004e0c:	d007      	beq.n	8004e1e <_strtoul_l.constprop.0+0x76>
 8004e0e:	4580      	cmp	r8, r0
 8004e10:	d322      	bcc.n	8004e58 <_strtoul_l.constprop.0+0xb0>
 8004e12:	d101      	bne.n	8004e18 <_strtoul_l.constprop.0+0x70>
 8004e14:	45a1      	cmp	r9, r4
 8004e16:	db1f      	blt.n	8004e58 <_strtoul_l.constprop.0+0xb0>
 8004e18:	fb00 4003 	mla	r0, r0, r3, r4
 8004e1c:	2601      	movs	r6, #1
 8004e1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e22:	e7e9      	b.n	8004df8 <_strtoul_l.constprop.0+0x50>
 8004e24:	2c2b      	cmp	r4, #43	@ 0x2b
 8004e26:	bf04      	itt	eq
 8004e28:	782c      	ldrbeq	r4, [r5, #0]
 8004e2a:	1c85      	addeq	r5, r0, #2
 8004e2c:	e7cd      	b.n	8004dca <_strtoul_l.constprop.0+0x22>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1d8      	bne.n	8004de4 <_strtoul_l.constprop.0+0x3c>
 8004e32:	2c30      	cmp	r4, #48	@ 0x30
 8004e34:	bf0c      	ite	eq
 8004e36:	2308      	moveq	r3, #8
 8004e38:	230a      	movne	r3, #10
 8004e3a:	e7d3      	b.n	8004de4 <_strtoul_l.constprop.0+0x3c>
 8004e3c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8004e40:	f1bc 0f19 	cmp.w	ip, #25
 8004e44:	d801      	bhi.n	8004e4a <_strtoul_l.constprop.0+0xa2>
 8004e46:	3c37      	subs	r4, #55	@ 0x37
 8004e48:	e7dc      	b.n	8004e04 <_strtoul_l.constprop.0+0x5c>
 8004e4a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8004e4e:	f1bc 0f19 	cmp.w	ip, #25
 8004e52:	d804      	bhi.n	8004e5e <_strtoul_l.constprop.0+0xb6>
 8004e54:	3c57      	subs	r4, #87	@ 0x57
 8004e56:	e7d5      	b.n	8004e04 <_strtoul_l.constprop.0+0x5c>
 8004e58:	f04f 36ff 	mov.w	r6, #4294967295
 8004e5c:	e7df      	b.n	8004e1e <_strtoul_l.constprop.0+0x76>
 8004e5e:	1c73      	adds	r3, r6, #1
 8004e60:	d106      	bne.n	8004e70 <_strtoul_l.constprop.0+0xc8>
 8004e62:	2322      	movs	r3, #34	@ 0x22
 8004e64:	f8ce 3000 	str.w	r3, [lr]
 8004e68:	4630      	mov	r0, r6
 8004e6a:	b932      	cbnz	r2, 8004e7a <_strtoul_l.constprop.0+0xd2>
 8004e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e70:	b107      	cbz	r7, 8004e74 <_strtoul_l.constprop.0+0xcc>
 8004e72:	4240      	negs	r0, r0
 8004e74:	2a00      	cmp	r2, #0
 8004e76:	d0f9      	beq.n	8004e6c <_strtoul_l.constprop.0+0xc4>
 8004e78:	b106      	cbz	r6, 8004e7c <_strtoul_l.constprop.0+0xd4>
 8004e7a:	1e69      	subs	r1, r5, #1
 8004e7c:	6011      	str	r1, [r2, #0]
 8004e7e:	e7f5      	b.n	8004e6c <_strtoul_l.constprop.0+0xc4>
 8004e80:	08005177 	.word	0x08005177

08004e84 <_strtoul_r>:
 8004e84:	f7ff bf90 	b.w	8004da8 <_strtoul_l.constprop.0>

08004e88 <_malloc_usable_size_r>:
 8004e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e8c:	1f18      	subs	r0, r3, #4
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bfbc      	itt	lt
 8004e92:	580b      	ldrlt	r3, [r1, r0]
 8004e94:	18c0      	addlt	r0, r0, r3
 8004e96:	4770      	bx	lr

08004e98 <_init>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	bf00      	nop
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr

08004ea4 <_fini>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	bf00      	nop
 8004ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eaa:	bc08      	pop	{r3}
 8004eac:	469e      	mov	lr, r3
 8004eae:	4770      	bx	lr
